{"version":3,"sources":["cards.js","Container.jsx","Card.jsx","GoalsSelection.jsx","Explore.jsx","Season.jsx","Scoring.jsx","Carto.js","serviceWorker.js","index.js"],"names":["EXPLORE_CARDS","number","name","type","duration","AMBUSH_CARDS","SEASON_CARDS","scores","GOAL_CARDS","effect","LETTER_CARDS","letter","Container","menuAction","children","isGoalsReady","className","onClick","id","Card","prefix","numberId","src","process","alt","ICONS","farmlands","forests","territory","villages","Goal","goalType","letterCard","selectGoalCard","selectedGoalCard","selectRandomGoalCard","Boolean","onChange","e","target","value","defaultValue","disabled","CARDS","map","card","key","GoalsSelection","state","switchTabs","Object","entries","goals","index","goalsType","PreviousCard","cardNumber","previousCard","CurrentCard","currentCard","NextCard","Explore","nextTurn","currentSeason","currentDuration","timeRemaining","Season","startSeason","join","goal","highlightClass","includes","Scoring","initialState","tab","phase","A","B","C","D","isGameActive","deck","ambushDeck","seasons","round","deckIndex","usedAmbushIndexes","Carto","assign","bind","setupSeason","prevProps","prevState","this","setup","reset","setState","_","find","o","values","reduce","r","g","notAllowedTypes","res","val","randomGoal","Math","floor","random","length","shuffleDeck","setTimeout","ambushCard","pop","push","pullAt","scorePhase","explorePhase","i","updateObject","array","shuffledDeck","sort","RUINS","5","6","AMBUSHES","1","2","3","4","isDeckReady","currentEl","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f972e61.chunk.js","sourcesContent":["const EXPLORE_CARDS = [\n  {\n    number: 5,\n    name: 'Temple Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  {\n    number: 6,\n    name: 'Outpost Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  {\n    number: 7,\n    name: 'Great River',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 8,\n    name: 'Farmland',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 9,\n    name: 'Hamlet',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 10,\n    name: 'Forgotten Forest',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 11,\n    name: 'Hinterland Stream',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 12,\n    name: 'Homestead',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 13,\n    name: 'Orchard',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 14,\n    name: 'Treetop Village',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 15,\n    name: 'Marshlands',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 16,\n    name: 'Fishing Village',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 17,\n    name: 'Rift Lands',\n    type: 'explore',\n    duration: 0,\n  },\n];\n\nconst AMBUSH_CARDS = [\n  {\n    number: 1,\n    name: 'Goblin Attack',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 2,\n    name: 'Bugbear Assault',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 3,\n    name: 'Kobold Onslaught',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 4,\n    name: 'Gnoll Raid',\n    type: 'ambush',\n    duration: 0,\n  },\n];\n\nconst SEASON_CARDS = [\n  {\n    number: 18,\n    name: 'Spring',\n    scores: ['A', 'B'],\n    duration: 8,\n  },\n  {\n    number: 19,\n    name: 'Summer',\n    scores: ['B', 'C'],\n    duration: 8,\n  },\n  {\n    number: 20,\n    name: 'Fall',\n    scores: ['C', 'D'],\n    duration: 7,\n  },\n  {\n    number: 21,\n    name: 'Winter',\n    scores: ['D', 'A'],\n    duration: 6,\n  },\n];\n\nconst GOAL_CARDS = [\n  {\n    number: 26,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '1 point for each forest space adjacent to the edge of the map',\n  },\n  {\n    number: 27,\n    name: 'Greenbough',\n    type: 'forests',\n    effect:\n      '1 point per column or row with at least one forest space (both column and row score)',\n  },\n  {\n    number: 28,\n    name: 'Treetower',\n    type: 'forests',\n    effect:\n      '1 point per forest space with all four sides surrounded by filled spaces',\n  },\n  {\n    number: 29,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect:\n      '3 points for each mountain connected by a cluster of forest spaces',\n  },\n  {\n    number: 30,\n    name: 'Canal Lake',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a farm space.\\n 1 point per farm space adjacent to a water space',\n  },\n  {\n    number: 31,\n    name: 'Mages Valley',\n    type: 'farmlands',\n    effect:\n      '2 points per water space adjacent to a mountain.\\n 1 point per farm space adjacent to a mountain.',\n  },\n  {\n    number: 32,\n    name: 'The Golden Granary',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a ruin space.\\n 3 points per farm space on a ruin space',\n  },\n  {\n    number: 33,\n    name: 'Shoreside Expanse',\n    type: 'farmlands',\n    effect:\n      '3 points per cluster of farm not adjacent to water spaces or the edge of the map.\\n 3 points per cluster of water not adjacent to farm spaces or the edge of the map',\n  },\n  {\n    number: 34,\n    name: 'Wildholds',\n    type: 'villages',\n    effect: '8 points per cluster of 6 or more village spaces',\n  },\n  {\n    number: 35,\n    name: 'Great City',\n    type: 'villages',\n    effect:\n      '1 point per village space in your largest village cluster that is not adjacent to mountain spaces',\n  },\n  {\n    number: 36,\n    name: 'Greengold Plains',\n    type: 'villages',\n    effect:\n      '3 points for each cluster of village spaces that is adjacent to three or more different terrain types',\n  },\n  {\n    number: 37,\n    name: 'Shieldgate',\n    type: 'villages',\n    effect: '2 points per village space in your second largest village cluster',\n  },\n  {\n    number: 38,\n    name: 'Borderlands',\n    type: 'territory',\n    effect: '6 points per each completely filled row or column',\n  },\n  {\n    number: 39,\n    name: 'Last Barony',\n    type: 'territory',\n    effect: '3 points for each column in your largest square of filled spaces',\n  },\n  {\n    number: 40,\n    name: 'The Broken Road',\n    type: 'territory',\n    effect:\n      '3 points for each diagonal line of filled spaces that touches that left and bottom edges of the map',\n  },\n  {\n    number: 41,\n    name: 'The Cauldrons',\n    type: 'territory',\n    effect:\n      '1 point per empty space surrounded on all four sides by filled spaces or the edge of the map',\n  },\n];\n\nconst LETTER_CARDS = [\n  {\n    number: 22,\n    letter: 'A',\n  },\n  {\n    number: 23,\n    letter: 'B',\n  },\n  {\n    number: 24,\n    letter: 'C',\n  },\n  {\n    number: 25,\n    letter: 'D',\n  },\n];\n\nexport default {\n  EXPLORE_CARDS,\n  AMBUSH_CARDS,\n  SEASON_CARDS,\n  GOAL_CARDS,\n  LETTER_CARDS,\n};\n","import React from 'react';\n\nconst Container = ({ menuAction, children, isGoalsReady }) => {\n  return (\n    <div className=\"container\">\n      <nav className=\"menu\" onClick={menuAction}>\n        <button className=\"btn-menu\" id=\"goals\">\n          Goals\n        </button>\n        {isGoalsReady && (\n          <button className=\"btn-menu\" id=\"game\">\n            Game\n          </button>\n        )}\n        <button className=\"btn-menu btn-menu--left\" id=\"reset\">\n          Reset\n        </button>\n      </nav>\n      {children}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from 'react';\n\nconst Card = ({ id, className, prefix = 'card_' }) => {\n  const numberId = typeof id === 'number' && id < 10 ? `0${id}` : id;\n  return (\n    <img\n      className={className ? className : 'card'}\n      src={`${process.env.PUBLIC_URL}/images/${prefix}${numberId}.jpg`}\n      alt={id}\n    />\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\n// Import Data\nimport CARDS from './cards';\n// Import Components\nimport Card from './Card';\n\nconst ICONS = {\n  farmlands: 'farmlands',\n  forests: 'forest',\n  territory: 'territory',\n  villages: 'village',\n};\n\nconst Goal = ({\n  goalType,\n  isGoalsReady,\n  letterCard,\n  selectGoalCard,\n  selectedGoalCard,\n  selectRandomGoalCard,\n}) => {\n  return (\n    <div className=\"goal-options\">\n      {Boolean(selectedGoalCard) ? (\n        <div className=\"card-container\">\n          <Card id={letterCard.number} className=\"card-mini\" />\n          <Card\n            id={ICONS[goalType]}\n            className=\"card-icon card-icon--selected\"\n            prefix=\"icon-\"\n          />\n          <Card id={selectedGoalCard.number} />\n        </div>\n      ) : (\n        <Card id={letterCard.number} />\n      )}\n      <div className=\"select\">\n        <select\n          onChange={e => selectGoalCard(e.target.value, letterCard.letter)}\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled>\n            Select a Goal\n          </option>\n          {CARDS.GOAL_CARDS.map(card => (\n            <option\n              key={card.number}\n              value={card.number}\n              disabled={goalType && card.type !== goalType}\n            >\n              {card.name} ({card.type})\n            </option>\n          ))}\n        </select>\n        <div className=\"select-arrow\" />\n      </div>\n      <button\n        className=\"btn btn--secondary btn--wide\"\n        onClick={() => selectRandomGoalCard(letterCard.letter)}\n        disabled={isGoalsReady}\n      >\n        Random\n      </button>\n    </div>\n  );\n};\n\nconst GoalsSelection = ({\n  selectGoalCard,\n  selectRandomGoalCard,\n  state,\n  switchTabs,\n}) => {\n  return (\n    <main>\n      <h1 className=\"title\">Select Goals</h1>\n      <ul className=\"goals-selection\">\n        {Object.entries(state.goals).map(([key, value], index) => {\n          const letterCard = CARDS.LETTER_CARDS[index];\n\n          return (\n            <Goal\n              key={key}\n              letterCard={letterCard}\n              selectGoalCard={selectGoalCard}\n              selectedGoalCard={state.goals[letterCard.letter]}\n              goalType={state.goalsType[letterCard.letter]}\n              selectRandomGoalCard={selectRandomGoalCard}\n              isGoalsReady={state.isGoalsReady}\n            />\n          );\n        })}\n      </ul>\n      <footer>\n        <button\n          className=\"btn btn--primary\"\n          onClick={() => switchTabs('game')}\n          disabled={!state.isGoalsReady}\n        >\n          Confirm\n        </button>\n      </footer>\n    </main>\n  );\n};\n\nexport default GoalsSelection;\n","import React from 'react';\n\n// Import Components\nimport Card from './Card';\n\nconst PreviousCard = ({ previousCard }) => {\n  const cardNumber = previousCard.number || 0;\n\n  return (\n    <div className=\"explore-card explore-card--previous\">\n      <Card id={cardNumber} className=\"card card--faded-left\" />\n    </div>\n  );\n};\n\nconst CurrentCard = ({ currentCard, previousCard }) => {\n  return (\n    <div className=\"explore-card explore-card--current\">\n      {previousCard.type === 'ruin' ? (\n        <Card id={previousCard.number} className=\"card-mini card-mini--ruin\" />\n      ) : null}\n      <Card id={currentCard.number} />\n    </div>\n  );\n};\n\nconst NextCard = ({ currentCard }) => {\n  return (\n    <div className=\"explore-card explore-card--next\">\n      <Card id={0} className=\"card card--faded-right\" />\n      <Card id={currentCard.number + 1} className=\"invisible\" />\n    </div>\n  );\n};\n\nconst Explore = ({ state, nextTurn }) => {\n  const { currentSeason, currentDuration, currentCard, previousCard } = state;\n\n  const timeRemaining = currentSeason.duration - currentDuration;\n  return (\n    <main>\n      <h1 className=\"title\">\n        <Card\n          id=\"season\"\n          className=\"card-icon card-icon--inline-title\"\n          prefix=\"icon-\"\n        />\n        {currentSeason.name}\n      </h1>\n      <h2 className=\"subtitle\">\n        Time remaining: {timeRemaining > -1 ? timeRemaining : 0}\n      </h2>\n      <section className=\"playarea\">\n        <PreviousCard previousCard={previousCard} />\n        <CurrentCard currentCard={currentCard} previousCard={previousCard} />\n        <NextCard currentCard={currentCard} />\n      </section>\n      <footer>\n        <button className=\"btn btn--primary\" onClick={() => nextTurn()}>\n          {timeRemaining > 0 ? 'Next Turn' : 'Score Season'}\n        </button>\n      </footer>\n    </main>\n  );\n};\n\nexport default Explore;\n","import React from 'react';\n\n// Import Components\nimport Card from './Card';\n\nconst Season = ({ state, startSeason }) => {\n  const { currentSeason, goals } = state;\n\n  if (currentSeason.number) {\n    return (\n      <main>\n        <h1 className=\"title\">\n          <Card\n            id=\"season\"\n            className=\"card-icon card-icon--inline-title\"\n            prefix=\"icon-\"\n          />\n          Next Season: {currentSeason.name}\n        </h1>\n        <h2 className=\"subtitle\">\n          Duration: {currentSeason.duration} | Scoring:{' '}\n          {currentSeason.scores.join(' & ')}\n        </h2>\n        <section className=\"seasonarea\">\n          {Object.entries(goals).map(([key, goal]) => {\n            const highlightClass = currentSeason.scores.includes(key)\n              ? 'scoring-card--active'\n              : '';\n            return (\n              <div\n                key={`scoring-card-${goal.number}`}\n                className={`scoring-card ${highlightClass}`}\n              >\n                <Card id={goal.number} />\n                <p className=\"card-description\">{goal.effect}</p>\n              </div>\n            );\n          })}\n        </section>\n        <footer>\n          <button className=\"btn btn--primary\" onClick={() => startSeason()}>\n            Begin Season\n          </button>\n        </footer>\n      </main>\n    );\n  }\n\n  return <div></div>;\n};\n\nexport default Season;\n","import React from 'react';\n\n// Import Components\nimport Card from './Card';\n\nconst Scoring = ({ state, nextTurn }) => {\n  const { currentSeason, goals } = state;\n\n  if (currentSeason.number) {\n    return (\n      <main>\n        <h1 className=\"title\">\n          <Card\n            id=\"season\"\n            className=\"card-icon card-icon--inline-title\"\n            prefix=\"icon-\"\n          />\n          Scoring Season: {currentSeason.name}\n        </h1>\n        <h2 className=\"subtitle\">\n          Scoring: {currentSeason.scores.join(' & ')}\n        </h2>\n        <section className=\"seasonarea\">\n          {currentSeason.scores.map(letter => {\n            const goal = goals[letter];\n            return (\n              <div\n                key={`scoring-card-${goal.number}`}\n                className=\"scoring-card scoring-card--scoring\"\n              >\n                <Card id={goal.number} />\n                <p className=\"card-description\">{goal.effect}</p>\n              </div>\n            );\n          })}\n        </section>\n        <footer>\n          {currentSeason.name !== 'Winter' ? (\n            <button className=\"btn btn--primary\" onClick={() => nextTurn()}>\n              Go to Next Season\n            </button>\n          ) : null}\n        </footer>\n      </main>\n    );\n  }\n\n  return <div></div>;\n};\n\nexport default Scoring;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\n\n// Import Data\nimport CARDS from './cards';\n// Import Components\nimport Container from './Container';\nimport GoalsSelection from './GoalsSelection';\nimport Explore from './Explore';\nimport Season from './Season';\nimport Scoring from './Scoring';\n\nconst initialState = {\n  tab: 'goals',\n  phase: 'season',\n  goals: {\n    A: null,\n    B: null,\n    C: null,\n    D: null,\n  },\n  goalsType: {\n    A: null,\n    B: null,\n    C: null,\n    D: null,\n  },\n  isGoalsReady: false,\n  isGameActive: false,\n  deck: [],\n  ambushDeck: [],\n  seasons: [],\n  round: 0,\n  deckIndex: -1,\n  currentSeason: {},\n  currentDuration: 0,\n  currentCard: {},\n  previousCard: {},\n  usedAmbushIndexes: [],\n};\n\nclass Carto extends Component {\n  constructor() {\n    super();\n    this.state = Object.assign({}, initialState);\n\n    this.switchTabs = this.switchTabs.bind(this);\n    this.selectGoalCard = this.selectGoalCard.bind(this);\n    this.selectRandomGoalCard = this.selectRandomGoalCard.bind(this);\n    this.setupSeason = this.setupSeason.bind(this);\n    this.startSeason = this.startSeason.bind(this);\n    this.nextTurn = this.nextTurn.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (\n      this.state.tab === 'game' &&\n      this.state.tab !== prevState.tab &&\n      !this.state.isGameActive\n    ) {\n      this.setup();\n    }\n  }\n  switchTabs(e) {\n    const id = typeof e === 'string' ? e : e.target.id;\n\n    if (id === 'reset') {\n      this.reset();\n    } else if (id && this.state.tab !== id) {\n      this.setState({ tab: id });\n    }\n  }\n\n  reset() {\n    this.setState({ ...initialState });\n  }\n\n  selectGoalCard(value, letter) {\n    const goal = _.find(CARDS.GOAL_CARDS, o => o.number === +value);\n\n    const goals = {\n      ...this.state.goals,\n      [letter]: goal,\n    };\n\n    const isGoalsReady = Object.values(goals).reduce(\n      (r, g) => (g !== null ? r : false),\n      true\n    );\n\n    const goalsType = {\n      ...this.state.goalsType,\n      [letter]: goal.type,\n    };\n\n    this.setState({\n      goals,\n      goalsType,\n      isGoalsReady,\n    });\n  }\n\n  selectRandomGoalCard(letter) {\n    const notAllowedTypes = Object.values({\n      ...this.state.goalsType,\n      [letter]: null,\n    }).reduce((res, val) => {\n      if (val) res[val] = true;\n      return res;\n    }, {});\n\n    let randomGoal = null;\n\n    while (!randomGoal) {\n      randomGoal =\n        CARDS.GOAL_CARDS[Math.floor(Math.random() * CARDS.GOAL_CARDS.length)];\n      if (notAllowedTypes[randomGoal.type]) {\n        randomGoal = null;\n      }\n    }\n    this.selectGoalCard(randomGoal.number, letter);\n  }\n\n  setup() {\n    this.setState({\n      isGameActive: true,\n      // Create deck\n      deck: [...CARDS.EXPLORE_CARDS],\n      // Create ambush and shuffle deck\n      ambushDeck: this.shuffleDeck([...CARDS.AMBUSH_CARDS]),\n      // Create seasons deck\n      seasons: [...CARDS.SEASON_CARDS],\n    });\n\n    // Wait for state to be set before running setup season\n    setTimeout(() => {\n      this.setupSeason();\n    }, 500);\n  }\n\n  setupSeason() {\n    // Increase season\n    const round = this.state.round + 1;\n    // Reset deck index\n    const deckIndex = -1;\n    // Get ambush card\n    const ambushDeck = [...this.state.ambushDeck];\n    const ambushCard = ambushDeck.pop();\n    // Get deck\n    let deck = [...this.state.deck];\n    // Add ambush card to deck and shuffle\n    deck.push(ambushCard);\n    // Remove any previously used ambush cards\n    if (this.state.usedAmbushIndexes.length > 0) {\n      _.pullAt(deck, this.state.usedAmbushIndexes);\n    }\n    // Shuffle deck\n    deck = this.shuffleDeck(deck);\n    // Set current season\n    const currentSeason = { ...CARDS.SEASON_CARDS[round - 1] };\n    this.setState({\n      phase: 'season',\n      round,\n      deckIndex,\n      ambushDeck,\n      deck,\n      currentSeason,\n      previousCard: {},\n      currentDuration: 0,\n      currentCard: {},\n      usedAmbushIndexes: [],\n    });\n  }\n\n  startSeason() {\n    this.setState({\n      phase: 'explore',\n    });\n\n    setTimeout(() => {\n      this.nextTurn();\n    }, 500);\n  }\n\n  nextTurn() {\n    // Check of season threshold\n    if (\n      this.state.currentDuration >= this.state.currentSeason.duration &&\n      this.state.phase === 'explore'\n    ) {\n      this.scorePhase();\n    } else {\n      this.explorePhase();\n    }\n  }\n\n  explorePhase() {\n    // Add one to deckIndex\n    const deckIndex = this.state.deckIndex + 1;\n    // Revealing next card of the deck\n    const currentCard = this.state.deck[deckIndex];\n    // Set previous card\n    const previousCard = deckIndex > 0 ? this.state.deck[deckIndex - 1] : {};\n\n    // Calculate duration\n    let currentDuration = 0;\n    for (let i = 0; i <= deckIndex; i++) {\n      currentDuration += this.state.deck[i].duration;\n    }\n\n    const updateObject = {\n      deckIndex,\n      currentDuration,\n      currentCard,\n      previousCard,\n    };\n    if (this.state.phase !== 'explore') {\n      updateObject.phase = 'explore';\n    }\n\n    // If ambush, resolve and flag to remove\n    if (currentCard.type === 'ambush') {\n      const usedAmbushIndexes = [...this.state.usedAmbushIndexes];\n      usedAmbushIndexes.push(deckIndex);\n      updateObject.usedAmbushIndexes = usedAmbushIndexes;\n    }\n\n    this.setState(updateObject);\n\n    // If ruin, call explore phase again\n    if (currentCard.type === 'ruin') {\n      setTimeout(() => {\n        this.explorePhase();\n      }, 500);\n    } else {\n    }\n  }\n\n  scorePhase() {\n    this.setState({\n      phase: 'scoring',\n    });\n  }\n\n  shuffleDeck(array) {\n    // Shuffle cards\n    const shuffledDeck = [...array.sort(() => Math.random() - 0.5)];\n    // Verify if an ambush is after a ruin and permutate their positions\n    const RUINS = { 5: true, 6: true };\n    const AMBUSHES = { 1: true, 2: true, 3: true, 4: true };\n    let isDeckReady = false;\n    while (!isDeckReady) {\n      isDeckReady = true;\n      for (let i = 0; i < shuffledDeck.length; i++) {\n        const currentEl = shuffledDeck[i];\n        const previousEl = shuffledDeck[i - 1] || {};\n\n        if (RUINS[previousEl.number] && AMBUSHES[currentEl.number]) {\n          isDeckReady = false;\n          [shuffledDeck[i - 1], shuffledDeck[i]] = [\n            shuffledDeck[i],\n            shuffledDeck[i - 1],\n          ];\n        }\n      }\n    }\n\n    return shuffledDeck;\n  }\n\n  render() {\n    return (\n      <Container\n        menuAction={this.switchTabs}\n        isGoalsReady={this.state.isGoalsReady}\n      >\n        {this.state.tab === 'goals' && (\n          <GoalsSelection\n            selectGoalCard={this.selectGoalCard}\n            selectRandomGoalCard={this.selectRandomGoalCard}\n            state={this.state}\n            switchTabs={this.switchTabs}\n          />\n        )}\n        {this.state.tab === 'game' && this.state.phase === 'season' && (\n          <Season state={this.state} startSeason={this.startSeason} />\n        )}\n        {this.state.tab === 'game' && this.state.phase === 'explore' && (\n          <Explore state={this.state} nextTurn={this.nextTurn} />\n        )}\n        {this.state.tab === 'game' && this.state.phase === 'scoring' && (\n          <Scoring state={this.state} nextTurn={this.setupSeason} />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default Carto;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Carto from './Carto';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Carto />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}