{"version":3,"sources":["images/carto-logo.svg","serviceWorker.js","utils/index.js","utils/cards.js","utils/constants.js","engine.js","useGlobalState.js","components/Card.jsx","components/ExploreGoal.jsx","components/Header.jsx","components/Explore.jsx","components/GameOver.jsx","components/GoalCard.jsx","components/Goals.jsx","components/Home.jsx","components/Rules.jsx","components/Scoring.jsx","components/Season.jsx","components/Setup.jsx","components/App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","shuffle","list","res","sort","Math","random","getRandomItem","items","floor","length","EDICT_CARDS","id","letter","index","EXPLORE_CARDS","name","type","duration","10","11","12","13","14","15","16","17","AMBUSH_CARDS","position","SEASON_CARDS","18","scores","19","20","21","GOAL_CARDS","26","effect","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","SKILL_CARDS","51","cost","text","52","53","54","55","56","57","58","PROMO_AMBUSH_CARDS","pa01","pa02","pa03","pa04","SCREENS","COLORS","SIMPLE_GAME_GOALS","forests","farmlands","villages","territory","NORMAL_GAME_GOALS","PHASES","GOAL_TYPE","this","shuffledDeck","Object","values","CARDS","goals","deck","riftLands","monsters","activeMonsters","usedMonsters","skills","currentSeason","currentSeasonIndex","phase","explorationIndex","currentDuration","mode","promoMonsters","extraRiftLands","setupGoals","monstersArr","promoMonstersArr","Array","fill","quantity","shuffledList","i","item","getRandomItems","setupSeason","goalsIndexes","forestGoal","farmlandsGoal","villagesGoal","territoryGoal","newShuffledDeck","push","pop","newDeck","card","AMBUSHES","1","2","3","4","RUINS","5","6","isDeckReady","currentEl","state","currentCard","goToPreviousCard","goToScore","reduce","acc","monsterCard","goToNextCard","startSeason","previousCard","nextCard","isOnRuin","isAmbush","initialState","game","gameEngine","screen","showGoals","useGlobalState","createGlobalState","Card","className","prefix","src","process","alt","ExploreGoal","side","isActive","Header","title","isMainButtonDisabled","setScreen","setShowGoals","isResume","backgroundModifier","AppBar","Button","onClick","startIcon","disabled","flag","reset","PreviousCard","cardID","CurrentCard","NextCard","isGoalActive","season","some","score","Explore","setGame","handleNextCard","handlePreviousCard","isExploreDisabled","variant","GameOver","isGoalsDisabled","logo","GoalCard","Goals","map","key","Home","steps","RuleGoal","RuleExplore","RuleDraw","RuleRuins","RuleAmbush","RuleSkills","RuleSeasonCheck","RuleScoring","RuleEndGame","ruleComponents","Goal","Draw","Ruins","Ambush","Skills","Scoring","Rules","useState","ruleStep","setRuleStep","ruleComponent","Stepper","activeStep","alternativeLabel","label","Step","StepLabel","prevActiveStep","find","startNewSeason","Season","c","join","Setup","addMonsters","setAddMonsters","addPromoMonsters","setAddPromoMonsters","addRiftLands","setAddRiftLands","addSkills","setAddSkills","setMode","FormGroup","FormControl","component","FormLabel","style","color","RadioGroup","aria-label","value","onChange","event","target","FormControlLabel","control","Radio","Checkbox","checked","setup","ScreenComponents","App","console","log","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2864f016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carto-logo.de703539.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Shuffles list returning a new shuffled instance\n * @param {array} list\n * @returns {array}\n */\nexport const shuffle = (list) => {\n  const res = [...list];\n  res.sort(() => Math.random() - 0.5);\n  return res;\n};\n\n/**\n * Get n number of items from an array\n * @param {array} list the array where items should be fetched from\n * @param {number} quantity the number of items to be returned\n * @returns {array}\n */\nexport const getRandomItems = (list, quantity) => {\n  const shuffledList = shuffle(list);\n  const res = new Array(quantity).fill(null);\n  for (let i = 0; i < res.length; i++) {\n    const item = shuffledList[i];\n    res[i] = item;\n  }\n  return res;\n};\n\n/**\n * Gets random item from list of items\n * @param {array} items the list of items\n * @returns {any} a random item from list of items\n */\nexport const getRandomItem = (items) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n","const AMBUSH_CARDS = {\n  '01': {\n    id: '01',\n    name: 'Goblin Attack',\n    type: 'ambush',\n    duration: 0,\n    position: 3,\n  },\n  '02': {\n    id: '02',\n    name: 'Bugbear Assault',\n    type: 'ambush',\n    duration: 0,\n    position: 2,\n  },\n  '03': {\n    id: '03',\n    name: 'Kobold Onslaught',\n    type: 'ambush',\n    duration: 0,\n    position: 4,\n  },\n  '04': {\n    id: '04',\n    name: 'Gnoll Raid',\n    type: 'ambush',\n    duration: 0,\n    position: 1,\n  },\n};\n\nconst PROMO_AMBUSH_CARDS = {\n  pa01: {\n    id: 'pa01',\n    name: 'Flayer Incursion',\n    type: 'ambush',\n    duration: 0,\n    position: 2,\n  },\n  pa02: {\n    id: 'pa02',\n    name: 'Insectoid Invasion',\n    type: 'ambush',\n    duration: 0,\n    position: 1,\n  },\n  pa03: {\n    id: 'pa03',\n    name: 'Ratman Strike',\n    type: 'ambush',\n    duration: 0,\n    position: 3,\n  },\n  pa04: {\n    id: 'pa04',\n    name: 'Ogre Charge',\n    type: 'ambush',\n    duration: 0,\n    position: 4,\n  },\n};\n\nconst EXPLORE_CARDS = {\n  '05': {\n    id: '05',\n    name: 'Temple Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  '06': {\n    id: '06',\n    name: 'Outpost Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  '07': {\n    id: '07',\n    name: 'Great River',\n    type: 'explore',\n    duration: 1,\n  },\n  '08': {\n    id: '08',\n    name: 'Farmland',\n    type: 'explore',\n    duration: 1,\n  },\n  '09': {\n    id: '09',\n    name: 'Hamlet',\n    type: 'explore',\n    duration: 1,\n  },\n  10: {\n    id: 10,\n    name: 'Forgotten Forest',\n    type: 'explore',\n    duration: 1,\n  },\n  11: {\n    id: 11,\n    name: 'Hinterland Stream',\n    type: 'explore',\n    duration: 2,\n  },\n  12: {\n    id: 12,\n    name: 'Homestead',\n    type: 'explore',\n    duration: 2,\n  },\n  13: {\n    id: 13,\n    name: 'Orchard',\n    type: 'explore',\n    duration: 2,\n  },\n  14: {\n    id: 14,\n    name: 'Treetop Village',\n    type: 'explore',\n    duration: 2,\n  },\n  15: {\n    id: 15,\n    name: 'Marshlands',\n    type: 'explore',\n    duration: 2,\n  },\n  16: {\n    id: 16,\n    name: 'Fishing Village',\n    type: 'explore',\n    duration: 2,\n  },\n  17: {\n    id: 17,\n    name: 'Rift Lands',\n    type: 'explore',\n    duration: 0,\n  },\n};\n\nconst EDICT_CARDS = [\n  {\n    id: 22,\n    letter: 'A',\n    index: 0,\n  },\n  {\n    id: 23,\n    letter: 'B',\n    index: 1,\n  },\n  {\n    id: 24,\n    letter: 'C',\n    index: 2,\n  },\n  {\n    id: 25,\n    letter: 'D',\n    index: 3,\n  },\n];\n\nconst SEASON_CARDS = {\n  18: {\n    id: 18,\n    name: 'Spring',\n    scores: [EDICT_CARDS[0], EDICT_CARDS[1]],\n    duration: 8,\n  },\n  19: {\n    id: 19,\n    name: 'Summer',\n    scores: [EDICT_CARDS[1], EDICT_CARDS[2]],\n    duration: 8,\n  },\n  20: {\n    id: 20,\n    name: 'Fall',\n    scores: [EDICT_CARDS[2], EDICT_CARDS[3]],\n    duration: 7,\n  },\n  21: {\n    id: 21,\n    name: 'Winter',\n    scores: [EDICT_CARDS[3], EDICT_CARDS[0]],\n    duration: 6,\n  },\n};\n\nconst GOAL_CARDS = {\n  26: {\n    id: 26,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '1 point for each forest space adjacent to the edge of the map.',\n  },\n  27: {\n    id: 27,\n    name: 'Greenbough',\n    type: 'forests',\n    effect: '1 point per column or row with at least one forest space (both column and row score).',\n  },\n  28: {\n    id: 28,\n    name: 'Treetower',\n    type: 'forests',\n    effect: '1 point per forest space with all four sides surrounded by filled spaces.',\n  },\n  29: {\n    id: 29,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '3 points for each mountain connected by a cluster of forest spaces.',\n  },\n  30: {\n    id: 30,\n    name: 'Canal Lake',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a farm space.\\n 1 point per farm space adjacent to a water space.',\n  },\n  31: {\n    id: 31,\n    name: 'Mages Valley',\n    type: 'farmlands',\n    effect:\n      '2 points per water space adjacent to a mountain.\\n 1 point per farm space adjacent to a mountain.',\n  },\n  32: {\n    id: 32,\n    name: 'The Golden Granary',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a ruin space.\\n 3 points per farm space on a ruin space',\n  },\n  33: {\n    id: 33,\n    name: 'Shoreside Expanse',\n    type: 'farmlands',\n    effect:\n      '3 points per cluster of farm not adjacent to water spaces or the edge of the map.\\n 3 points per cluster of water not adjacent to farm spaces or the edge of the map.',\n  },\n  34: {\n    id: 34,\n    name: 'Wildholds',\n    type: 'villages',\n    effect: '8 points per cluster of 6 or more village spaces.',\n  },\n  35: {\n    id: 35,\n    name: 'Great City',\n    type: 'villages',\n    effect:\n      '1 point per village space in your largest village cluster that is not adjacent to mountain spaces.',\n  },\n  36: {\n    id: 36,\n    name: 'Greengold Plains',\n    type: 'villages',\n    effect:\n      '3 points for each cluster of village spaces that is adjacent to three or more different terrain types.',\n  },\n  37: {\n    id: 37,\n    name: 'Shieldgate',\n    type: 'villages',\n    effect: '2 points per village space in your second largest village cluster.',\n  },\n  38: {\n    id: 38,\n    name: 'Borderlands',\n    type: 'territory',\n    effect: '6 points per each completely filled row or column.',\n  },\n  39: {\n    id: 39,\n    name: 'Last Barony',\n    type: 'territory',\n    effect: '3 points for each column in your largest square of filled spaces.',\n  },\n  40: {\n    id: 40,\n    name: 'The Broken Road',\n    type: 'territory',\n    effect:\n      '3 points for each diagonal line of filled spaces that touches that left and bottom edges of the map.',\n  },\n  41: {\n    id: 41,\n    name: 'The Cauldrons',\n    type: 'territory',\n    effect:\n      '1 point per empty space surrounded on all four sides by filled spaces or the edge of the map.',\n  },\n};\n\nconst SKILL_CARDS = {\n  51: {\n    id: 51,\n    name: 'Acrobatics',\n    cost: 2,\n    text:\n      'During the Draw Phase, if an ambush card is revealed, the shape drawn on your map sheet is a 2x1 shape instead of the depicted shape.',\n  },\n  52: {\n    id: 52,\n    name: 'Concentrate',\n    cost: 3,\n    text:\n      'During the Draw Phase, if an ambush card is revealed, draw the chosen shape a second time. Fill it with the same terrain type.',\n  },\n  53: {\n    id: 53,\n    name: 'Cure Wounds',\n    cost: 1,\n    text:\n      'During the Draw Phase, draw an additional 2x1 shape adjacent to a monster space. Fill it with an available terrain type.',\n  },\n  54: {\n    id: 54,\n    name: 'Diplomacy',\n    cost: 1,\n    text:\n      'At any time, draw a 1x1 square and fill it with both farm terrain and village terrain types',\n  },\n  55: {\n    id: 55,\n    name: 'Knowledge',\n    cost: 0,\n    text:\n      'During the Draw Phase, fill the chosen shape with village terrain instead of an available terrain type.',\n  },\n  56: {\n    id: 56,\n    name: 'Move Silently',\n    cost: 0,\n    text:\n      'During the Draw Phase, draw the chosen shape so that it overhangs the edge of the map. Do not draw any portions that overhang.',\n  },\n  57: {\n    id: 57,\n    name: 'Negotiate',\n    cost: 1,\n    text: 'During the Draw Phase, draw a 2x2 shape instead of one of the available shapes.',\n  },\n  58: {\n    id: 58,\n    name: 'Search',\n    cost: 0,\n    text:\n      'During the Draw Phase, draw an additional 1x1 square adjacent to the drawn shape. Fill it with the same terrain type.',\n  },\n};\n\nexport default {\n  EXPLORE_CARDS,\n  AMBUSH_CARDS,\n  SEASON_CARDS,\n  GOAL_CARDS,\n  EDICT_CARDS,\n  SKILL_CARDS,\n  PROMO_AMBUSH_CARDS,\n};\n","export const SCREENS = {\n  EXPLORE: 'EXPLORE',\n  GOALS: 'GOALS',\n  HOME: 'HOME',\n  SCORING: 'SCORING',\n  SEASON: 'SEASON',\n  SETUP: 'SETUP',\n  GAME_OVER: 'GAME_OVER',\n  RULES: 'RULES',\n};\n\nexport const COLORS = {\n  PRIMARY: '#e09264',\n  SECONDARY: '#64b2e0',\n};\n\nexport const SIMPLE_GAME_GOALS = {\n  forests: [26, 27],\n  farmlands: [30, 31],\n  villages: [34, 37],\n  territory: [38, 39],\n};\n\nexport const NORMAL_GAME_GOALS = {\n  forests: [26, 27, 28, 29],\n  farmlands: [30, 31, 32, 33],\n  villages: [34, 35, 36, 37],\n  territory: [38, 39, 40, 41],\n};\n\nexport const RIFT_LAND_ID = 17;\n\nexport const PHASES = {\n  SEASON: 'SEASON',\n  EXPLORE: 'EXPLORE',\n  SCORING: 'SCORING',\n};\n\nexport const GOAL_TYPE = {\n  farmlands: 'farmlands',\n  forests: 'forest',\n  territory: 'territory',\n  villages: 'village',\n};\n","import { shuffle, getRandomItems, getRandomItem } from './utils';\nimport CARDS from './utils/cards';\nimport {\n  SIMPLE_GAME_GOALS,\n  NORMAL_GAME_GOALS,\n  PHASES,\n  RIFT_LAND_ID,\n  SCREENS,\n} from './utils/constants';\n\nclass GameEngine {\n  constructor() {\n    this.shuffledDeck = shuffle(Object.values(CARDS.EXPLORE_CARDS));\n\n    this.goals = [];\n    this.deck = [];\n\n    this.riftLands = null;\n\n    this.monsters = null;\n    this.activeMonsters = [];\n    this.usedMonsters = [];\n\n    this.skills = null;\n    this.currentSeason = null;\n    this.currentSeasonIndex = -1;\n    this.phase = PHASES.SEASON;\n    this.explorationIndex = 0;\n    this.currentDuration = 0;\n  }\n\n  get previousCard() {\n    return this.deck[this.explorationIndex - 1];\n  }\n\n  get currentCard() {\n    return this.deck[this.explorationIndex];\n  }\n\n  get nextCard() {\n    return this.deck[this.explorationIndex + 1];\n  }\n\n  get isOnRuin() {\n    return this.previousCard?.type === 'ruin';\n  }\n\n  get isAmbush() {\n    return this.currentCard?.type === 'ambush';\n  }\n\n  get state() {\n    return {\n      goals: this.goals,\n      deck: this.deck,\n      skills: this.skills,\n      currentSeason: this.currentSeason,\n      phase: this.phase,\n      previousCard: this.previousCard,\n      currentCard: this.currentCard,\n      nextCard: this.nextCard,\n      currentDuration: this.currentDuration,\n      isOnRuin: this.isOnRuin,\n      isAmbush: this.isAmbush,\n    };\n  }\n\n  setup({\n    mode = 'normal',\n    monsters = true,\n    promoMonsters = false,\n    extraRiftLands = false,\n    skills = false,\n  }) {\n    // Define goals\n    this.setupGoals(mode);\n\n    // Add monsters\n    const monstersArr = monsters ? Object.values(CARDS.AMBUSH_CARDS) : [];\n    const promoMonstersArr = promoMonsters ? Object.values(CARDS.PROMO_AMBUSH_CARDS) : [];\n    this.monsters =\n      monsters || promoMonsters ? shuffle([...monstersArr, ...promoMonstersArr]) : null;\n\n    // Add extra Rift Lands\n    this.riftLands = extraRiftLands ? new Array(2).fill(CARDS.EXPLORE_CARDS[RIFT_LAND_ID]) : null;\n\n    // Add skills\n    this.skills = skills ? getRandomItems(CARDS.SKILL_CARDS, 3) : null;\n\n    // Prepare deck\n    this.setupSeason();\n  }\n\n  setupGoals(mode) {\n    const goalsIndexes = mode === 'simple' ? SIMPLE_GAME_GOALS : NORMAL_GAME_GOALS;\n\n    const forestGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.forests)];\n    const farmlandsGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.farmlands)];\n    const villagesGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.villages)];\n    const territoryGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.territory)];\n\n    this.goals = shuffle([forestGoal, farmlandsGoal, villagesGoal, territoryGoal]);\n  }\n\n  setupSeason() {\n    this.currentSeasonIndex++;\n    this.currentSeason = Object.values(CARDS.SEASON_CARDS)[this.currentSeasonIndex];\n    this.currentDuration = this.currentSeason.duration;\n\n    let newShuffledDeck = [...this.shuffledDeck];\n\n    // Add one monster\n    if (this.monsters) {\n      this.activeMonsters.push(this.monsters.pop());\n      newShuffledDeck = [...newShuffledDeck, ...this.activeMonsters];\n    }\n\n    // If first season and rift lands, add them\n    if (this.riftLands) {\n      newShuffledDeck = [...newShuffledDeck, ...this.riftLands];\n    }\n\n    // Shuffle built deck\n    newShuffledDeck = shuffle(newShuffledDeck);\n\n    const newDeck = [];\n\n    // Prepare deck\n    let duration = 0;\n    let index = 0;\n    while (duration < this.currentSeason.duration) {\n      const card = newShuffledDeck[index];\n      newDeck.push(card);\n      duration += card.duration;\n      index++;\n    }\n\n    this.deck = shuffle(newDeck);\n\n    // Swap monsters if coming after ruin, if used also remove it\n    const AMBUSHES = { 1: true, 2: true, 3: true, 4: true };\n    const RUINS = { 5: true, 6: true };\n\n    let isDeckReady = false;\n\n    while (!isDeckReady) {\n      isDeckReady = true;\n      for (let i = 0; i < this.deck.length; i++) {\n        const currentEl = this.deck[i];\n        const previousEl = this.deck[i - 1] || {};\n\n        if (RUINS[previousEl.id] && AMBUSHES[currentEl.id]) {\n          isDeckReady = false;\n          [this.deck[i - 1], this.deck[i]] = [this.deck[i], this.deck[i - 1]];\n        }\n      }\n    }\n\n    this.explorationIndex = this.deck[0].type === 'ruin' ? 1 : 0;\n\n    return this.state;\n  }\n\n  startSeason() {\n    this.phase = SCREENS.EXPLORE;\n    this.currentDuration -= this.deck[this.explorationIndex].duration;\n\n    return this.state;\n  }\n\n  goToPreviousCard() {\n    this.explorationIndex--;\n    this.currentDuration += this.deck[this.explorationIndex].duration;\n\n    if (this.currentCard.type === 'ruin') {\n      return this.goToPreviousCard();\n    }\n\n    if (this.currentCard.type === 'ambush') {\n      this.activeMonsters.push(this.usedMonsters.pop());\n    }\n\n    return this.state;\n  }\n\n  goToNextCard() {\n    if (this.currentDuration <= 0) {\n      return this.goToScore();\n    }\n\n    if (this.currentCard.type === 'ambush') {\n      // remove from active monsters\n      this.activeMonsters = this.activeMonsters.reduce((acc, monsterCard) => {\n        if (monsterCard.id === this.currentCard.id) {\n          this.usedMonsters.push(monsterCard);\n        } else {\n          acc.push(monsterCard);\n        }\n\n        return acc;\n      }, []);\n    }\n\n    this.explorationIndex++;\n    this.currentDuration -= this.deck[this.explorationIndex].duration;\n\n    if (this.currentCard.type === 'ruin') {\n      return this.goToNextCard();\n    }\n\n    return this.state;\n  }\n\n  goToScore() {\n    this.phase = SCREENS.SCORING;\n\n    return this.state;\n  }\n\n  startNewSeason() {\n    if (this.currentSeasonIndex < 3) {\n      this.setupSeason();\n      this.startSeason();\n    } else {\n      this.phase = SCREENS.GAME_OVER;\n    }\n\n    return this.state;\n  }\n\n  reset() {\n    this.shuffledDeck = shuffle(Object.values(CARDS.EXPLORE_CARDS));\n\n    this.goals = [];\n    this.deck = [];\n\n    this.riftLands = null;\n\n    this.monsters = null;\n    this.activeMonsters = [];\n    this.usedMonsters = [];\n\n    this.skills = null;\n    this.currentSeason = null;\n    this.currentSeasonIndex = -1;\n    this.phase = PHASES.SEASON;\n    this.explorationIndex = 0;\n    this.currentDuration = 0;\n\n    return this.state;\n  }\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport gameEngine from './engine';\n\nimport { SCREENS } from './utils/constants';\n\nconst initialState = {\n  game: gameEngine.state,\n  screen: SCREENS.HOME,\n  showGoals: false,\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import React from 'react';\n\nconst Card = ({ id, className, prefix = 'card_' }) => {\n  return (\n    <img\n      className={className ? className : 'card'}\n      src={`${process.env.PUBLIC_URL}/images/${prefix}${id}.jpg`}\n      alt={id}\n    />\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport CARDS from '../utils/cards';\nimport { GOAL_TYPE } from '../utils/constants';\n\nimport Card from './Card';\n\nconst ExploreGoal = ({ card, index, side, isActive }) => {\n  return (\n    <div className={`explore-goal explore-goal--${side} ${isActive ? 'explore-goal--active' : ''}`}>\n      <div className=\"icons\">\n        <Card id={CARDS.EDICT_CARDS[index].id} className=\"card-mini\" />\n        <Card id={GOAL_TYPE[card.type]} className=\"card-icon card-icon--selected\" prefix=\"icon-\" />\n      </div>\n      <span className=\"effect\">{card.effect}</span>\n    </div>\n  );\n};\n\nexport default ExploreGoal;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport FlagIcon from '@material-ui/icons/Flag';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport HistoryIcon from '@material-ui/icons/History';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nconst getBackgroundModifier = (phase, isAmbush, isOnRuin) => {\n  if (phase !== 'EXPLORE') {\n    return '';\n  }\n\n  if (isAmbush) {\n    return 'header--ambush';\n  }\n\n  if (isOnRuin) {\n    return 'header--ruin';\n  }\n\n  return '';\n};\n\nconst Header = ({ title, isMainButtonDisabled = false }) => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [screen, setScreen] = useGlobalState('screen');\n  const [showGoals, setShowGoals] = useGlobalState('showGoals');\n\n  const handleResume = () => {\n    setScreen(game.phase);\n  };\n\n  const handleGoals = () => {\n    setScreen(SCREENS.GOALS);\n  };\n\n  const handleRules = () => {\n    setScreen(SCREENS.RULES);\n  };\n\n  const handleReset = () => {\n    gameEngine.reset();\n    setScreen(SCREENS.SETUP);\n  };\n\n  const toggleGoalsVisibility = () => {\n    setShowGoals((flag) => !flag);\n  };\n\n  const isResume = screen === SCREENS.RULES || screen === SCREENS.GOALS;\n\n  const backgroundModifier = getBackgroundModifier(game.phase, game.isAmbush, game.isOnRuin);\n\n  return (\n    <AppBar position=\"static\" className={`header ${backgroundModifier}`}>\n      <Button\n        className=\"header__btn\"\n        onClick={isResume ? handleResume : handleGoals}\n        startIcon={isResume ? <ExploreIcon /> : <FlagIcon />}\n        disabled={isMainButtonDisabled}\n      >\n        {isResume ? 'Resume' : 'Goals'}\n      </Button>\n      <Button className=\"header__btn\" onClick={handleRules} startIcon={<MenuBookIcon />}>\n        Rules\n      </Button>\n      <h3>{title}</h3>\n      <Button\n        className=\"header__btn\"\n        onClick={toggleGoalsVisibility}\n        startIcon={showGoals ? <VisibilityOffIcon /> : <VisibilityIcon />}\n        disabled={screen !== SCREENS.EXPLORE}\n      >\n        {showGoals ? 'Hide Goals' : 'Show Goals'}\n      </Button>\n      <Button className=\"header__btn\" onClick={handleReset} startIcon={<HistoryIcon />}>\n        Reset\n      </Button>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport gameEngine from '../engine';\n\nimport Card from './Card';\nimport ExploreGoal from './ExploreGoal';\nimport Header from './Header';\n\nconst PreviousCard = ({ previousCard, onClick }) => {\n  const cardID = previousCard?.id || '00';\n\n  return (\n    <div className=\"explore-card explore-card--previous\" onClick={onClick}>\n      <Card id={cardID} className=\"card card--faded-left\" />\n    </div>\n  );\n};\n\nconst CurrentCard = ({ currentCard, previousCard }) => {\n  return (\n    <div className=\"explore-card explore-card--current\">\n      {previousCard?.type === 'ruin' ? (\n        <Card id=\"ruin\" className=\"icon icon--ruin\" prefix=\"icon-\" />\n      ) : null}\n      {currentCard?.type === 'ambush' ? (\n        <Card id={`ambush-${currentCard.position}`} className=\"icon icon--ambush\" prefix=\"icon-\" />\n      ) : null}\n      <Card id={currentCard.id} />\n    </div>\n  );\n};\n\nconst NextCard = ({ nextCard, onClick }) => {\n  return (\n    <div className=\"explore-card explore-card--next\" onClick={onClick}>\n      <Card id=\"00\" className=\"card card--faded-right\" />\n    </div>\n  );\n};\n\nconst isGoalActive = (season, letter) => {\n  return season.scores.some((score) => score.letter === letter);\n};\n\nconst Explore = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n  const [showGoals] = useGlobalState('showGoals');\n\n  const handleNextCard = () => {\n    setGame(gameEngine.goToNextCard());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const handlePreviousCard = () => {\n    setGame(gameEngine.goToPreviousCard());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason, currentDuration } = game;\n\n  return (\n    <div className=\"explore\">\n      <Header title=\"Explore\" isExploreDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        {currentSeason.name}\n      </h1>\n\n      <h2 className=\"subtitle\">Time remaining: {currentDuration > -1 ? currentDuration : 0}</h2>\n\n      <div className=\"explore-container\">\n        {showGoals && (\n          <aside className=\"explore-goals explore-goals--left\">\n            <ExploreGoal\n              card={game.goals[0]}\n              index={0}\n              side=\"left\"\n              isActive={isGoalActive(currentSeason, 'A')}\n            />\n            <ExploreGoal\n              card={game.goals[1]}\n              index={1}\n              side=\"left\"\n              isActive={isGoalActive(currentSeason, 'B')}\n            />\n          </aside>\n        )}\n\n        <section\n          className={`explore__playarea ${showGoals ? 'explore__playarea--with-goals' : ''}`}\n        >\n          <PreviousCard\n            previousCard={game.previousCard}\n            onClick={Boolean(game.previousCard) ? handlePreviousCard : null}\n          />\n          <CurrentCard currentCard={game.currentCard} previousCard={game.previousCard} />\n          <NextCard nextCard={game.nextCard} onClick={handleNextCard} />\n        </section>\n\n        {showGoals && (\n          <aside className=\"explore-goals explore-goals--right\">\n            <ExploreGoal\n              card={game.goals[2]}\n              index={2}\n              side=\"right\"\n              isActive={isGoalActive(currentSeason, 'C')}\n            />\n            <ExploreGoal\n              card={game.goals[3]}\n              index={3}\n              side=\"right\"\n              isActive={isGoalActive(currentSeason, 'D')}\n            />\n          </aside>\n        )}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button\n          variant=\"outlined\"\n          className=\"btn btn--outline\"\n          onClick={handlePreviousCard}\n          disabled={!Boolean(game.previousCard)}\n        >\n          Previous Card\n        </Button>\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleNextCard}>\n          {currentDuration > 0 ? 'Next Card' : 'Score'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Explore;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport logo from '../images/carto-logo.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nimport Header from './Header';\n\nconst GameOver = () => {\n  // Global States\n  const [, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handStartNewGame = () => {\n    setGame(gameEngine.reset());\n    setScreen(SCREENS.SETUP);\n  };\n\n  return (\n    <div className=\"game-over\">\n      <Header title=\"End Game\" isGoalsDisabled isExploreDisabled />\n      <img className=\"logo\" src={logo} alt=\"Carto logo\" />\n      <p>Tally your scores. The highest score wins!</p>\n      <div className=\"game-over__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handStartNewGame}>\n          Start New Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from 'react';\n\nimport CARDS from '../utils/cards';\nimport { GOAL_TYPE } from '../utils/constants';\n\nimport Card from './Card';\n\nconst GoalCard = ({ card, index, isActive = true }) => (\n  <div className={`goal-card ${isActive ? '' : 'goal-card--inactive'}`}>\n    <div className=\"goal-card__types\">\n      <Card id={CARDS.EDICT_CARDS[index].id} className=\"card-mini\" />\n      <Card id={GOAL_TYPE[card.type]} className=\"card-icon card-icon--selected\" prefix=\"icon-\" />\n    </div>\n    <div className=\"goal-card__main\">\n      <Card id={card.id} />\n      <p className=\"goal-card__effect\">{card.effect}</p>\n    </div>\n  </div>\n);\n\nexport default GoalCard;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport GoalCard from './GoalCard';\nimport Header from './Header';\n\nconst Goals = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleResume = () => {\n    setScreen(game.phase);\n  };\n\n  return (\n    <div className=\"goals\">\n      <Header title=\"Goals\" isGoalsDisabled />\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          return <GoalCard key={card.id} card={card} index={index} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleResume}>\n          Resume Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Goals;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport logo from '../images/carto-logo.svg';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nconst Home = () => {\n  // Global States\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleCreateGame = () => {\n    setScreen(SCREENS.SETUP);\n  };\n\n  const handleResumeGame = () => {\n    // Do magic to resume game\n    // setScreen to appropriate screen\n  };\n\n  return (\n    <div className=\"home\">\n      <img className=\"logo\" src={logo} alt=\"Carto logo\" />\n      <h1>Carto</h1>\n      <div className=\"home__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleCreateGame}>\n          Create Game\n        </Button>\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleResumeGame} disabled>\n          Resume Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\n\nimport Header from './Header';\n\nconst steps = [\n  'Goal',\n  'Explore',\n  'Draw',\n  'Ruins',\n  'Ambush',\n  // 'Skills',\n  'Season Check',\n  'Scoring',\n  'End Game',\n];\n\nconst RuleGoal = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Goal of the Game</h2>\n      <p>\n        In this game, players are exploring the land as cartographers trying to make the best map by\n        getting the most points over the course of 4 seasons.\n      </p>\n      <div className=\"rule-image\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-goal-1.jpg`} alt=\"rule goal\" />\n      </div>\n      <p>\n        Decide what side of the map sheet you will be playing with. All players must use the same\n        side.\n      </p>\n      <div className=\"rule-image\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-goal-2.jpg`} alt=\"rule goal\" />\n      </div>\n    </div>\n  );\n};\n\nconst RuleExplore = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Explore Phase</h2>\n      <p>\n        During the Explore phase, a card will be drawn indicating shapes and types of terrains you\n        may find. The terrains are:\n      </p>\n      <div className=\"rule-image\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-explore-1.jpg`} alt=\"rule explore\" />\n      </div>\n      <p>If a card has two types of terrains, you must choose only one type to use.</p>\n      <div className=\"rule-image rule-image--flat\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-explore-2.jpg`} alt=\"rule explore\" />\n      </div>\n      <p>If a card has two different shapes, you must choose only one shape to use.</p>\n      <div className=\"rule-image rule-image--flat\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-explore-3.jpg`} alt=\"rule explore\" />\n      </div>\n      <p>If the shape you chose contains a coin, color one of the coins in the coin track.</p>\n      <div className=\"rule-image rule-image--flat\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-explore-4.jpg`} alt=\"rule explore\" />\n      </div>\n      <div className=\"rule-image\">\n        <img src={`${process.env.PUBLIC_URL}/images/rule-explore-5.jpg`} alt=\"rule explore\" />\n      </div>\n    </div>\n  );\n};\n\nconst RuleDraw = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Draw Phase</h2>\n      <p>Those are the rules for drawing:</p>\n      <ul>\n        <li>\n          The shapes cannot overlap filled spaced or the edges of the map (mountains and wasteland\n          are considered spaces).\n        </li>\n      </ul>\n      <li>Shapes can be rotated and/or mirrored.</li>\n      <li>Shapes do not have to connect to a previously drawn shape.</li>\n      <li>If each side of a mountain space is filled, fill in the next coin in the coin track.</li>\n      <h3>1x1 Square Rule</h3>\n      <p>\n        If a shape cannot be legally drawn, you must instead draw a 1x1 square anywhere on their map\n        and filled with an available terrain type.\n      </p>\n    </div>\n  );\n};\n\nconst RuleRuins = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Ruins</h2>\n      <p>\n        When a card contains the Ruin icon, that shape MUST be drawn on top of a ruin.{' '}\n        <b>\n          If you can not or do not have an available ruin space, you must follow the 1x1 square\n          rule.\n        </b>\n      </p>\n    </div>\n  );\n};\n\nconst RuleAmbush = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Ambush</h2>\n      <p>When an ambush card is revealed:</p>\n      <h3>If all players are in the same location</h3>\n      <p>\n        Give your map sheet to the player in the indicated direction on the card. They must draw the\n        monster shape in your map, following all the drawing rules.{' '}\n        <b>If you can't draw the monster, follow the 1x1 square rule.</b> Then return the map to its\n        original player.\n      </p>\n      <h3>If playing solo or online</h3>\n      <p>\n        Use the icon in the top-right corner as reference. Starting from that corner, without\n        rotating or mirroring the shape, see if you can draw the monster shape. If not, move in the\n        direction of the arrows square by square until you can draw the shape. \n        <b>If you can't draw the monster, follow the 1x1 square rule.</b>\n      </p>\n    </div>\n  );\n};\n\nconst RuleSkills = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Using a Skill Card</h2>\n      <p>TBD</p>\n    </div>\n  );\n};\n\nconst RuleSeasonCheck = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Season Threshold Check</h2>\n      <p>\n        Each season has a time threshold and each explore card has a duration of 0-2 time units. The\n        game will keep track of that threshold and the season will end when the total of Explore\n        cards time units is equal or exceeds the season limit. Then to go scoring.\n      </p>\n    </div>\n  );\n};\n\nconst RuleScoring = () => {\n  return (\n    <div className=\"rule\">\n      <h2>Scoring a Season</h2>\n      <p>Each season will score two different goal cards.</p>\n      <p>Calculate how many points you score in each active goal card.</p>\n      <p>\n        Add 1 point for each unused coin (if playing with Skills coins can be spent and won't\n        count here).\n      </p>\n      <p>\n        Subtract 1 point for each side of monster squares that are not filled with other shapes (or\n        the edge of the map or the wasteland).\n      </p>\n      <p>Go to the next season or end the game if you're done with all 4 seasons.</p>\n    </div>\n  );\n};\n\nconst RuleEndGame = () => {\n  return (\n    <div className=\"rule\">\n      <h2>End of the Game</h2>\n      <p>Add the points for all 4 seasons. The winner is the player with the most points.</p>\n      <p>\n        In the case of a tie, the player who lost the least amount of points for monsters, win the\n        game.\n      </p>\n    </div>\n  );\n};\n\nconst ruleComponents = {\n  Goal: <RuleGoal />,\n  Explore: <RuleExplore />,\n  Draw: <RuleDraw />,\n  Ruins: <RuleRuins />,\n  Ambush: <RuleAmbush />,\n  Skills: <RuleSkills />,\n  'Season Check': <RuleSeasonCheck />,\n  Scoring: <RuleScoring />,\n  'End Game': <RuleEndGame />,\n};\n\nconst Rules = () => {\n  // Local States\n  const [ruleStep, setRuleStep] = useState(0);\n\n  const handleNext = () => {\n    setRuleStep((prevActiveStep) => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setRuleStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setRuleStep(0);\n  };\n\n  const ruleComponent = ruleComponents[steps[ruleStep]];\n\n  return (\n    <div className=\"rules\">\n      <Header title=\"Rules\" />\n      <Stepper activeStep={ruleStep} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <div className=\"rule-container\">{ruleComponent}</div>\n      <div className=\"rule-action-buttons\">\n        <Button\n          variant=\"outlined\"\n          className=\"btn btn--outline-filled\"\n          disabled={ruleStep === 0}\n          onClick={handleBack}\n        >\n          Back\n        </Button>\n        <Button\n          variant=\"outlined\"\n          className=\"btn btn--outline-filled\"\n          onClick={ruleStep === steps.length - 1 ? handleReset : handleNext}\n        >\n          {ruleStep === steps.length - 1 ? 'Reset' : 'Next'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Rules;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport Card from './Card';\nimport GoalCard from './GoalCard';\nimport Header from './Header';\n\nconst Scoring = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleNewStartSeason = () => {\n    setGame(gameEngine.startNewSeason());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason } = game;\n\n  return (\n    <div className=\"scoring\">\n      <Header title={`Score ${currentSeason.name}`} isMainButtonDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        Score for {currentSeason.name}\n      </h1>\n\n      <ul className=\"score-items\">\n        <li>Calculate your points for {currentSeason.scores[0].letter}.</li>\n        <li>Calculate your points for {currentSeason.scores[1].letter}.</li>\n        <li>Add 1 point for each unused coin you have.</li>\n        <li>Subtract 1 point for each adjacent Monster square that is not filled.</li>\n      </ul>\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          const isActive = Boolean(currentSeason.scores.find((card) => card.index === index));\n          return <GoalCard key={card.id} card={card} index={index} isActive={isActive} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleNewStartSeason}>\n          {currentSeason.name !== 'Winter' ? 'Start New Season' : 'End Game'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Scoring;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport gameEngine from '../engine';\n\nimport Card from './Card';\nimport GoalCard from './GoalCard';\nimport Header from './Header';\n\nconst Season = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleStartSeason = () => {\n    gameEngine.startSeason();\n    setGame(gameEngine.state);\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason } = game;\n\n  return (\n    <div className=\"season\">\n      <Header title=\"New Season\" isMainButtonDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        {currentSeason.name}\n      </h1>\n\n      <h2 className=\"subtitle\">\n        Duration: {currentSeason.duration} | Scoring:{' '}\n        {currentSeason.scores.map((c) => c.letter).join(' & ')}\n      </h2>\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          const isActive = Boolean(currentSeason.scores.find((card) => card.index === index));\n          return <GoalCard key={card.id} card={card} index={index} isActive={isActive} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleStartSeason}>\n          Start Season\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Season;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport logo from '../images/carto-logo.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { COLORS, SCREENS } from '../utils/constants';\n\nconst Setup = () => {\n  // Global States\n  const [, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n  // Local States\n  const [addMonsters, setAddMonsters] = useState(true);\n  const [addPromoMonsters, setAddPromoMonsters] = useState(false);\n  const [addRiftLands, setAddRiftLands] = useState(false);\n  const [addSkills, setAddSkills] = useState(false);\n  const [mode, setMode] = useState('normal');\n\n  const handleStartGame = () => {\n    gameEngine.setup({\n      mode,\n      monsters: addMonsters,\n      promoMonsters: addPromoMonsters,\n      extraRiftLands: addRiftLands,\n      skills: addSkills,\n    });\n    setGame(gameEngine.state);\n    setScreen(SCREENS.GOALS);\n  };\n\n  return (\n    <div className=\"setup\">\n      <img className=\"logo-small\" src={logo} alt=\"Carto logo\" />\n      <h1>Setup</h1>\n      <FormGroup>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\" style={{ color: COLORS.PRIMARY }}>\n            Mode\n          </FormLabel>\n          <RadioGroup\n            aria-label=\"mode\"\n            name=\"mode\"\n            value={mode}\n            onChange={(event) => setMode(event.target.value)}\n          >\n            <FormControlLabel value=\"simple\" control={<Radio />} label=\"Simple Goals\" />\n            <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n          </RadioGroup>\n        </FormControl>\n\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\" style={{ color: COLORS.PRIMARY }}>\n            Options\n          </FormLabel>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addMonsters}\n                onChange={() => setAddMonsters((value) => !value)}\n                name=\"add-monsters\"\n              />\n            }\n            label=\"Add Monsters\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addPromoMonsters}\n                onChange={() => setAddPromoMonsters((value) => !value)}\n                name=\"add-promo-monsters\"\n              />\n            }\n            label=\"Add Extra Promo Monsters\"\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addSkills}\n                onChange={() => setAddSkills((value) => !value)}\n                name=\"add-kills\"\n                disabled\n              />\n            }\n            label=\"Add Skills\"\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addRiftLands}\n                onChange={() => setAddRiftLands((value) => !value)}\n                name=\"add-rift-lands\"\n              />\n            }\n            label=\"Add Aditional Rift Lands\"\n          />\n        </FormControl>\n      </FormGroup>\n      <div className=\"setup__actions\">\n        <Button variant=\"outlined\" className=\"btn--outline\" onClick={handleStartGame}>\n          Start Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Setup;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nimport Explore from './Explore';\nimport GameOver from './GameOver';\nimport Goals from './Goals';\nimport Home from './Home';\nimport Rules from './Rules';\nimport Scoring from './Scoring';\nimport Season from './Season';\nimport Setup from './Setup';\n\nconst ScreenComponents = {\n  [SCREENS.EXPLORE]: <Explore />,\n  [SCREENS.GAME_OVER]: <GameOver />,\n  [SCREENS.GOALS]: <Goals />,\n  [SCREENS.HOME]: <Home />,\n  [SCREENS.RULES]: <Rules />,\n  [SCREENS.SCORING]: <Scoring />,\n  [SCREENS.SEASON]: <Season />,\n  [SCREENS.SETUP]: <Setup />,\n};\n\nconst getBackgroundModifier = (phase, isAmbush, isOnRuin) => {\n  if (phase !== 'EXPLORE') {\n    return '';\n  }\n\n  if (isAmbush) {\n    return 'bg-ambush';\n  }\n\n  if (isOnRuin) {\n    return 'bg-ruin';\n  }\n\n  return '';\n};\n\nconst App = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [screen] = useGlobalState('screen');\n  console.log(game);\n  const backgroundModifier = getBackgroundModifier(game.phase, game.isAmbush, game.isOnRuin);\n\n  return (\n    <Container maxWidth=\"lg\" className={`app-container ${backgroundModifier}`}>\n      {ScreenComponents[screen]}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}