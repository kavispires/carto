{"version":3,"sources":["cards.js","Container.jsx","Card.jsx","GoalsSelection.jsx","Cartographers.js","serviceWorker.js","index.js"],"names":["EXPLORE_CARDS","number","name","type","duration","AMBUSH_CARDS","SEASON_CARDS","scores","GOAL_CARDS","effect","LETTER_CARDS","letter","Container","menuAction","children","isGoalsReady","className","onClick","id","Card","prefix","numberId","src","process","alt","ICONS","farmlands","forests","territory","villages","Goal","goalType","letterCard","selectGoalCard","selectedGoalCard","selectRandomGoalCard","Boolean","onChange","e","target","value","defaultValue","disabled","CARDS","map","card","key","GoalsSelection","state","switchTabs","Object","entries","goals","index","goalsType","Cartographers","tab","A","B","C","D","isGameActive","bind","this","setState","goal","_","find","o","values","reduce","r","g","notAllowedTypes","res","val","randomGoal","Math","floor","random","length","deck","ambush","shuffleDeck","seasons","round","deckIndex","push","pop","currentSeason","scorePhase","explorePhase","array","sort","console","log","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.384fd58c.chunk.js","sourcesContent":["const EXPLORE_CARDS = [\n  {\n    number: 5,\n    name: 'Temple Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  {\n    number: 6,\n    name: 'Outpost Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  {\n    number: 7,\n    name: 'Great River',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 8,\n    name: 'Farmland',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 9,\n    name: 'Hamlet',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 10,\n    name: 'Forgotten Forest',\n    type: 'explore',\n    duration: 1,\n  },\n  {\n    number: 11,\n    name: 'Hinterland Stream',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 12,\n    name: 'Homestead',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 13,\n    name: 'Orchard',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 14,\n    name: 'Treetop Village',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 15,\n    name: 'Marshlands',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 16,\n    name: 'Fishing Village',\n    type: 'explore',\n    duration: 2,\n  },\n  {\n    number: 17,\n    name: 'Rift Lands',\n    type: 'explore',\n    duration: 0,\n  },\n];\n\nconst AMBUSH_CARDS = [\n  {\n    number: 1,\n    name: 'Goblin Attack',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 2,\n    name: 'Bugbear Assault',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 3,\n    name: 'Kobold Onslaught',\n    type: 'ambush',\n    duration: 0,\n  },\n  {\n    number: 4,\n    name: 'Gnoll Raid',\n    type: 'ambush',\n    duration: 0,\n  },\n];\n\nconst SEASON_CARDS = [\n  {\n    number: 18,\n    name: 'Spring',\n    scores: 'A B',\n    duration: 8,\n  },\n  {\n    number: 19,\n    name: 'Summber',\n    scores: 'B C',\n    duration: 8,\n  },\n  {\n    number: 20,\n    name: 'Fall',\n    scores: 'C D',\n    duration: 7,\n  },\n  {\n    number: 21,\n    name: 'Winter',\n    scores: 'D A',\n    duration: 6,\n  },\n];\n\nconst GOAL_CARDS = [\n  {\n    number: 26,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '1 point for each forest space adjacent to the edge of the map',\n  },\n  {\n    number: 27,\n    name: 'Greenbough',\n    type: 'forests',\n    effect:\n      '1 point per column or row with at least one forest space (both column and row score)',\n  },\n  {\n    number: 28,\n    name: 'Treetower',\n    type: 'forests',\n    effect:\n      '1 point per forest space with all four spaces surrounded by filled spaces',\n  },\n  {\n    number: 29,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect:\n      '3 points for each mountain connected by a cluster of forest spaces',\n  },\n  {\n    number: 30,\n    name: 'Canal Lake',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a farm space. 1 point per farm space adjacent to a water space',\n  },\n  {\n    number: 31,\n    name: 'Mages Valley',\n    type: 'farmlands',\n    effect:\n      '2 points per water space adjacent to a mountain. 1 point per farm space adjacent to a mountain.',\n  },\n  {\n    number: 32,\n    name: 'The Golden Granary',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a ruin space. 3 points per farm space on a ruin space',\n  },\n  {\n    number: 33,\n    name: 'Shoreside Expanse',\n    type: 'farmlands',\n    effect:\n      '3 points per cluster of farm not adjacent to water spaces or the edge of the map. 3 points per cluster of water not adjacent to farm spaces or the edge of the map',\n  },\n  {\n    number: 34,\n    name: 'Wildholds',\n    type: 'villages',\n    effect: '8 points per cluster of 6 or more village spaces',\n  },\n  {\n    number: 35,\n    name: 'Great City',\n    type: 'villages',\n    effect:\n      '1 point per village space in your largest village cluster that is not adjacent to mountain spaces',\n  },\n  {\n    number: 36,\n    name: 'Greengold Plains',\n    type: 'villages',\n    effect:\n      '3 points for each cluster of village spaces that is adjacent to three or more different terrain types',\n  },\n  {\n    number: 37,\n    name: 'Shieldgate',\n    type: 'villages',\n    effect: '2 points per village space in your second largest village cluster',\n  },\n  {\n    number: 38,\n    name: 'Borderlands',\n    type: 'territory',\n    effect: '6 points per each completely filled row or column',\n  },\n  {\n    number: 39,\n    name: 'Last Barony',\n    type: 'territory',\n    effect: '3 points for each column in your largest square of filled spaces',\n  },\n  {\n    number: 40,\n    name: 'The Broken Road',\n    type: 'territory',\n    effect:\n      '3 points for each diagonal line of filled spaces that touches that left and bottom edges of the map',\n  },\n  {\n    number: 41,\n    name: 'The Cauldrons',\n    type: 'territory',\n    effect:\n      '1 point per empty space surrounded on all four sides by filled spaces or the edge of the map',\n  },\n];\n\nconst LETTER_CARDS = [\n  {\n    number: 22,\n    letter: 'A',\n  },\n  {\n    number: 23,\n    letter: 'B',\n  },\n  {\n    number: 24,\n    letter: 'C',\n  },\n  {\n    number: 25,\n    letter: 'D',\n  },\n];\n\nexport default {\n  EXPLORE_CARDS,\n  AMBUSH_CARDS,\n  SEASON_CARDS,\n  GOAL_CARDS,\n  LETTER_CARDS,\n};\n","import React from 'react';\n\nconst Container = ({ menuAction, children, isGoalsReady }) => {\n  return (\n    <div className=\"container\">\n      <nav className=\"menu\" onClick={menuAction}>\n        <button className=\"btn-menu\" id=\"goals\">\n          Goals\n        </button>\n        {isGoalsReady && (\n          <button className=\"btn-menu\" id=\"game\">\n            Game\n          </button>\n        )}\n        <button className=\"btn-menu btn-menu--left\" id=\"reset\">\n          Reset\n        </button>\n      </nav>\n      {children}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from 'react';\n\nconst Card = ({ id, className, prefix = 'card_' }) => {\n  const numberId = typeof id === 'number' && id < 10 ? `0${id}` : id;\n  return (\n    <img\n      className={className ? className : 'card'}\n      src={`${process.env.PUBLIC_URL}/images/${prefix}${numberId}.jpg`}\n      alt={id}\n    />\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\n// Import Data\nimport CARDS from './cards';\n// Import Components\nimport Card from './Card';\n\nconst ICONS = {\n  farmlands: 'farmlands',\n  forests: 'forest',\n  territory: 'territory',\n  villages: 'village',\n};\n\nconst Goal = ({\n  goalType,\n  isGoalsReady,\n  letterCard,\n  selectGoalCard,\n  selectedGoalCard,\n  selectRandomGoalCard,\n}) => {\n  return (\n    <div className=\"goal-options\">\n      {Boolean(selectedGoalCard) ? (\n        <div className=\"card-container\">\n          <Card id={letterCard.number} className=\"card-mini\" />\n          <Card id={ICONS[goalType]} className=\"card-icon\" prefix=\"icon_\" />\n          <Card id={selectedGoalCard.number} />\n        </div>\n      ) : (\n        <Card id={letterCard.number} />\n      )}\n      <div className=\"select\">\n        <select\n          onChange={e => selectGoalCard(e.target.value, letterCard.letter)}\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled>\n            Select a Goal\n          </option>\n          {CARDS.GOAL_CARDS.map(card => (\n            <option\n              key={card.number}\n              value={card.number}\n              disabled={goalType && card.type !== goalType}\n            >\n              {card.name} ({card.type})\n            </option>\n          ))}\n        </select>\n        <div className=\"select-arrow\" />\n      </div>\n      <button\n        className=\"btn btn--secondary btn--wide\"\n        onClick={() => selectRandomGoalCard(letterCard.letter)}\n        disabled={isGoalsReady}\n      >\n        Random\n      </button>\n    </div>\n  );\n};\n\nconst GoalsSelection = ({\n  selectGoalCard,\n  selectRandomGoalCard,\n  state,\n  switchTabs,\n}) => {\n  return (\n    <main>\n      <h1 className=\"title\">Select Goals</h1>\n      <ul className=\"goals-selection\">\n        {Object.entries(state.goals).map(([key, value], index) => {\n          const letterCard = CARDS.LETTER_CARDS[index];\n\n          return (\n            <Goal\n              key={key}\n              letterCard={letterCard}\n              selectGoalCard={selectGoalCard}\n              selectedGoalCard={state.goals[letterCard.letter]}\n              goalType={state.goalsType[letterCard.letter]}\n              selectRandomGoalCard={selectRandomGoalCard}\n              isGoalsReady={state.isGoalsReady}\n            />\n          );\n        })}\n      </ul>\n      <footer>\n        <button\n          className=\"btn btn--primary\"\n          onClick={() => switchTabs('game')}\n          disabled={!state.isGoalsReady}\n        >\n          Confirm\n        </button>\n      </footer>\n    </main>\n  );\n};\n\nexport default GoalsSelection;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\n\n// Import Data\nimport CARDS from './cards';\n// Import Components\nimport Container from './Container';\nimport GoalsSelection from './GoalsSelection';\n\nclass Cartographers extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tab: 'goals',\n      goals: {\n        A: null,\n        B: null,\n        C: null,\n        D: null,\n      },\n      goalsType: {\n        A: null,\n        B: null,\n        C: null,\n        D: null,\n      },\n      isGoalsReady: false,\n      isGameActive: false,\n    };\n\n    this.switchTabs = this.switchTabs.bind(this);\n    this.selectGoalCard = this.selectGoalCard.bind(this);\n    this.selectRandomGoalCard = this.selectRandomGoalCard.bind(this);\n  }\n\n  switchTabs(e) {\n    const id = typeof e === 'string' ? e : e.target.id;\n\n    if (id && this.state.tab !== id) {\n      this.setState({ tab: id });\n    }\n  }\n\n  selectGoalCard(value, letter) {\n    const goal = _.find(CARDS.GOAL_CARDS, o => o.number === +value);\n\n    const goals = {\n      ...this.state.goals,\n      [letter]: goal,\n    };\n\n    const isGoalsReady = Object.values(goals).reduce(\n      (r, g) => (g !== null ? r : false),\n      true\n    );\n\n    const goalsType = {\n      ...this.state.goalsType,\n      [letter]: goal.type,\n    };\n\n    this.setState({\n      goals,\n      goalsType,\n      isGoalsReady,\n    });\n  }\n\n  selectRandomGoalCard(letter) {\n    const notAllowedTypes = Object.values({\n      ...this.state.goalsType,\n      [letter]: null,\n    }).reduce((res, val) => {\n      if (val) res[val] = true;\n      return res;\n    }, {});\n\n    let randomGoal = null;\n\n    while (!randomGoal) {\n      randomGoal =\n        CARDS.GOAL_CARDS[Math.floor(Math.random() * CARDS.GOAL_CARDS.length)];\n      if (notAllowedTypes[randomGoal.type]) {\n        randomGoal = null;\n      }\n    }\n    this.selectGoalCard(randomGoal.number, letter);\n  }\n\n  setup() {\n    // Choose the 4 scoring cards (dropdowns)\n\n    // Create deck\n    this.deck = [...CARDS.EXPLORE_CARDS];\n    // Create ambush deck\n    this.ambush = [...CARDS.AMBUSH_CARDS];\n    // Shuffle ambush cards\n    this.ambush = this.shuffleDeck(this.ambush);\n    // Create seasons deck\n    this.seasons = [...CARDS.SEASON_CARDS];\n  }\n\n  startSeason() {\n    // Increase season\n    this.round += 1;\n    // Reset deck index\n    this.deckIndex = 0;\n    // Add last ambush to deck\n    this.deck.push(this.ambush.pop());\n    // Shuffle deck\n    this.deck = this.shuffleDeck(this.deck);\n    // Set current season\n    this.currentSeason = { ...CARDS.SEASON_CARDS[this.round] };\n  }\n\n  nextTurn() {\n    // Check of season threshold\n    if (this.deckIndex + 1 >= this.currentSeason.duration) {\n      this.scorePhase();\n    } else {\n      this.explorePhase();\n    }\n  }\n\n  explorePhase() {\n    // Add one to deckIndex\n    this.deckIndex += 1;\n    // Revealing next card of the deck\n    const currentCard = this.deck[this.deckIndex];\n    // If ruin, call explore phase again\n    if (currentCard.type === 'ruin') {\n      // Display card\n      // TO-DO\n      // Call explore phase again\n      this.explorePhase();\n    }\n    // Display card\n  }\n\n  scorePhase() {}\n\n  shuffleDeck(array) {\n    // Shuffle cards\n    const shuffledDeck = [...array.sort(() => Math.random() - 0.5)];\n    // Verify if an ambush is after a ruin and permutate their positions\n\n    return shuffledDeck;\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <Container\n        menuAction={this.switchTabs}\n        isGoalsReady={this.state.isGoalsReady}\n      >\n        {this.state.tab === 'goals' && (\n          <GoalsSelection\n            selectGoalCard={this.selectGoalCard}\n            selectRandomGoalCard={this.selectRandomGoalCard}\n            state={this.state}\n            switchTabs={this.switchTabs}\n          />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default Cartographers;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Cartographers from './Cartographers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Cartographers />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}