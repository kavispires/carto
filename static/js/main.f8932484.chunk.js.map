{"version":3,"sources":["images/carto-logo.svg","serviceWorker.js","utils/index.js","utils/cards.js","utils/constants.js","engine.js","useGlobalState.js","components/Header.jsx","components/Card.jsx","components/ExploreGoal.jsx","components/Explore.jsx","components/GameOver.jsx","components/GoalCard.jsx","components/Goals.jsx","components/Home.jsx","components/Scoring.jsx","components/Season.jsx","components/Setup.jsx","components/App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","shuffle","list","res","sort","Math","random","getRandomItem","items","floor","length","EDICT_CARDS","number","letter","index","EXPLORE_CARDS","5","name","type","duration","6","7","8","9","10","11","12","13","14","15","16","17","AMBUSH_CARDS","1","2","3","4","SEASON_CARDS","18","scores","19","20","21","GOAL_CARDS","26","effect","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","SKILL_CARDS","51","cost","text","52","53","54","55","56","57","58","SCREENS","COLORS","SIMPLE_GAME_GOALS","forests","farmlands","villages","territory","NORMAL_GAME_GOALS","PHASES","GOAL_TYPE","this","shuffledDeck","Object","values","CARDS","goals","deck","riftLands","monsters","activeMonsters","usedMonsters","skills","currentSeason","currentSeasonIndex","phase","explorationIndex","currentDuration","mode","extraRiftLands","setupGoals","Array","fill","quantity","shuffledList","i","item","getRandomItems","setupSeason","goalsIndexes","forestGoal","farmlandsGoal","villagesGoal","territoryGoal","newShuffledDeck","push","pop","newDeck","card","AMBUSHES","RUINS","isDeckReady","currentEl","state","currentCard","goToPreviousCard","goToScore","reduce","acc","monsterCard","goToNextCard","startSeason","previousCard","nextCard","isOnRuin","isAmbush","initialState","screen","game","gameEngine","isLoading","showGoals","useGlobalState","createGlobalState","Header","title","isExploreDisabled","isGoalsDisabled","setScreen","setShowGoals","backgroundModifier","AppBar","position","className","Button","onClick","startIcon","disabled","flag","reset","Card","id","prefix","numberId","src","process","alt","ExploreGoal","side","isActive","PreviousCard","cardNumber","CurrentCard","NextCard","isGoalActive","season","some","score","Explore","setGame","handleNextCard","handlePreviousCard","variant","GameOver","logo","GoalCard","Goals","map","key","Home","Scoring","find","startNewSeason","Season","c","join","Setup","useState","setMode","addMonsters","setAddMonsters","addSkills","setAddSkills","addRiftLands","setAddRiftLands","FormGroup","FormControl","component","FormLabel","style","color","RadioGroup","aria-label","value","onChange","event","target","FormControlLabel","control","Radio","label","Checkbox","checked","setup","ScreenComponents","App","Container","maxWidth","LinearProgress","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8932484.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/carto-logo.de703539.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Shuffles list returning a new shuffled instance\n * @param {array} list\n * @returns {array}\n */\nexport const shuffle = (list) => {\n  const res = [...list];\n  res.sort(() => Math.random() - 0.5);\n  return res;\n};\n\n/**\n * Get n number of items from an array\n * @param {array} list the array where items should be fetched from\n * @param {number} quantity the number of items to be returned\n * @returns {array}\n */\nexport const getRandomItems = (list, quantity) => {\n  const shuffledList = shuffle(list);\n  const res = new Array(quantity).fill(null);\n  for (let i = 0; i < res.length; i++) {\n    const item = shuffledList[i];\n    res[i] = item;\n  }\n  return res;\n};\n\n/**\n * Gets random item from list of items\n * @param {array} items the list of items\n * @returns {any} a random item from list of items\n */\nexport const getRandomItem = (items) => {\n  return items[Math.floor(Math.random() * items.length)];\n};\n","const AMBUSH_CARDS = {\n  1: {\n    number: 1,\n    name: 'Goblin Attack',\n    type: 'ambush',\n    duration: 0,\n  },\n  2: {\n    number: 2,\n    name: 'Bugbear Assault',\n    type: 'ambush',\n    duration: 0,\n  },\n  3: {\n    number: 3,\n    name: 'Kobold Onslaught',\n    type: 'ambush',\n    duration: 0,\n  },\n  4: {\n    number: 4,\n    name: 'Gnoll Raid',\n    type: 'ambush',\n    duration: 0,\n  },\n};\n\nconst EXPLORE_CARDS = {\n  5: {\n    number: 5,\n    name: 'Temple Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  6: {\n    number: 6,\n    name: 'Outpost Ruins',\n    type: 'ruin',\n    duration: 0,\n  },\n  7: {\n    number: 7,\n    name: 'Great River',\n    type: 'explore',\n    duration: 1,\n  },\n  8: {\n    number: 8,\n    name: 'Farmland',\n    type: 'explore',\n    duration: 1,\n  },\n  9: {\n    number: 9,\n    name: 'Hamlet',\n    type: 'explore',\n    duration: 1,\n  },\n  10: {\n    number: 10,\n    name: 'Forgotten Forest',\n    type: 'explore',\n    duration: 1,\n  },\n  11: {\n    number: 11,\n    name: 'Hinterland Stream',\n    type: 'explore',\n    duration: 2,\n  },\n  12: {\n    number: 12,\n    name: 'Homestead',\n    type: 'explore',\n    duration: 2,\n  },\n  13: {\n    number: 13,\n    name: 'Orchard',\n    type: 'explore',\n    duration: 2,\n  },\n  14: {\n    number: 14,\n    name: 'Treetop Village',\n    type: 'explore',\n    duration: 2,\n  },\n  15: {\n    number: 15,\n    name: 'Marshlands',\n    type: 'explore',\n    duration: 2,\n  },\n  16: {\n    number: 16,\n    name: 'Fishing Village',\n    type: 'explore',\n    duration: 2,\n  },\n  17: {\n    number: 17,\n    name: 'Rift Lands',\n    type: 'explore',\n    duration: 0,\n  },\n};\n\nconst EDICT_CARDS = [\n  {\n    number: 22,\n    letter: 'A',\n    index: 0,\n  },\n  {\n    number: 23,\n    letter: 'B',\n    index: 1,\n  },\n  {\n    number: 24,\n    letter: 'C',\n    index: 2,\n  },\n  {\n    number: 25,\n    letter: 'D',\n    index: 3,\n  },\n];\n\nconst SEASON_CARDS = {\n  18: {\n    number: 18,\n    name: 'Spring',\n    scores: [EDICT_CARDS[0], EDICT_CARDS[1]],\n    duration: 8,\n  },\n  19: {\n    number: 19,\n    name: 'Summer',\n    scores: [EDICT_CARDS[1], EDICT_CARDS[2]],\n    duration: 8,\n  },\n  20: {\n    number: 20,\n    name: 'Fall',\n    scores: [EDICT_CARDS[2], EDICT_CARDS[3]],\n    duration: 7,\n  },\n  21: {\n    number: 21,\n    name: 'Winter',\n    scores: [EDICT_CARDS[3], EDICT_CARDS[0]],\n    duration: 6,\n  },\n};\n\nconst GOAL_CARDS = {\n  26: {\n    number: 26,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '1 point for each forest space adjacent to the edge of the map.',\n  },\n  27: {\n    number: 27,\n    name: 'Greenbough',\n    type: 'forests',\n    effect: '1 point per column or row with at least one forest space (both column and row score).',\n  },\n  28: {\n    number: 28,\n    name: 'Treetower',\n    type: 'forests',\n    effect: '1 point per forest space with all four sides surrounded by filled spaces.',\n  },\n  29: {\n    number: 29,\n    name: 'Sentinel Wood',\n    type: 'forests',\n    effect: '3 points for each mountain connected by a cluster of forest spaces.',\n  },\n  30: {\n    number: 30,\n    name: 'Canal Lake',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a farm space.\\n 1 point per farm space adjacent to a water space.',\n  },\n  31: {\n    number: 31,\n    name: 'Mages Valley',\n    type: 'farmlands',\n    effect:\n      '2 points per water space adjacent to a mountain.\\n 1 point per farm space adjacent to a mountain.',\n  },\n  32: {\n    number: 32,\n    name: 'The Golden Granary',\n    type: 'farmlands',\n    effect:\n      '1 point per water space adjacent to a ruin space.\\n 3 points per farm space on a ruin space',\n  },\n  33: {\n    number: 33,\n    name: 'Shoreside Expanse',\n    type: 'farmlands',\n    effect:\n      '3 points per cluster of farm not adjacent to water spaces or the edge of the map.\\n 3 points per cluster of water not adjacent to farm spaces or the edge of the map.',\n  },\n  34: {\n    number: 34,\n    name: 'Wildholds',\n    type: 'villages',\n    effect: '8 points per cluster of 6 or more village spaces.',\n  },\n  35: {\n    number: 35,\n    name: 'Great City',\n    type: 'villages',\n    effect:\n      '1 point per village space in your largest village cluster that is not adjacent to mountain spaces.',\n  },\n  36: {\n    number: 36,\n    name: 'Greengold Plains',\n    type: 'villages',\n    effect:\n      '3 points for each cluster of village spaces that is adjacent to three or more different terrain types.',\n  },\n  37: {\n    number: 37,\n    name: 'Shieldgate',\n    type: 'villages',\n    effect: '2 points per village space in your second largest village cluster.',\n  },\n  38: {\n    number: 38,\n    name: 'Borderlands',\n    type: 'territory',\n    effect: '6 points per each completely filled row or column.',\n  },\n  39: {\n    number: 39,\n    name: 'Last Barony',\n    type: 'territory',\n    effect: '3 points for each column in your largest square of filled spaces.',\n  },\n  40: {\n    number: 40,\n    name: 'The Broken Road',\n    type: 'territory',\n    effect:\n      '3 points for each diagonal line of filled spaces that touches that left and bottom edges of the map.',\n  },\n  41: {\n    number: 41,\n    name: 'The Cauldrons',\n    type: 'territory',\n    effect:\n      '1 point per empty space surrounded on all four sides by filled spaces or the edge of the map.',\n  },\n};\n\nconst SKILL_CARDS = {\n  51: {\n    number: 51,\n    name: 'Acrobatics',\n    cost: 2,\n    text:\n      'During the Draw Phase, if an ambush card is revealed, the shape drawn on your map sheet is a 2x1 shape instead of the depicted shape.',\n  },\n  52: {\n    number: 52,\n    name: 'Concentrate',\n    cost: 3,\n    text:\n      'During the Draw Phase, if an ambush card is revealed, draw the chosen shape a second time. Fill it with the same terrain type.',\n  },\n  53: {\n    number: 53,\n    name: 'Cure Wounds',\n    cost: 1,\n    text:\n      'During the Draw Phase, draw an additional 2x1 shape adjacent to a monster space. Fill it with an available terrain type.',\n  },\n  54: {\n    number: 54,\n    name: 'Diplomacy',\n    cost: 1,\n    text:\n      'At any time, draw a 1x1 square and fill it with both farm terrain and village terrain types',\n  },\n  55: {\n    number: 55,\n    name: 'Knowledge',\n    cost: 0,\n    text:\n      'During the Draw Phase, fill the chosen shape with village terrain instead of an available terrain type.',\n  },\n  56: {\n    number: 56,\n    name: 'Move Silently',\n    cost: 0,\n    text:\n      'During the Draw Phase, draw the chosen shape so that it overhangs the edge of the map. Do not draw any portions that overhang.',\n  },\n  57: {\n    number: 57,\n    name: 'Negotiate',\n    cost: 1,\n    text: 'During the Draw Phase, draw a 2x2 shape instead of one of the available shapes.',\n  },\n  58: {\n    number: 58,\n    name: 'Search',\n    cost: 0,\n    text:\n      'During the Draw Phase, draw an additional 1x1 square adjacent to the drawn shape. Fill it with the same terrain type.',\n  },\n};\n\nexport default {\n  EXPLORE_CARDS,\n  AMBUSH_CARDS,\n  SEASON_CARDS,\n  GOAL_CARDS,\n  EDICT_CARDS,\n  SKILL_CARDS,\n};\n","export const SCREENS = {\n  EXPLORE: 'EXPLORE',\n  GOALS: 'GOALS',\n  HOME: 'HOME',\n  SCORING: 'SCORING',\n  SEASON: 'SEASON',\n  SETUP: 'SETUP',\n  GAME_OVER: 'GAME_OVER',\n};\n\nexport const COLORS = {\n  PRIMARY: '#e09264',\n  SECONDARY: '#64b2e0',\n};\n\nexport const SIMPLE_GAME_GOALS = {\n  forests: [26, 27],\n  farmlands: [30, 31],\n  villages: [34, 37],\n  territory: [38, 39],\n};\n\nexport const NORMAL_GAME_GOALS = {\n  forests: [26, 27, 28, 29],\n  farmlands: [30, 31, 32, 33],\n  villages: [34, 35, 36, 37],\n  territory: [38, 39, 40, 41],\n};\n\nexport const RIFT_LAND_ID = 17;\n\nexport const PHASES = {\n  SEASON: 'SEASON',\n  EXPLORE: 'EXPLORE',\n  SCORING: 'SCORING',\n};\n\nexport const GOAL_TYPE = {\n  farmlands: 'farmlands',\n  forests: 'forest',\n  territory: 'territory',\n  villages: 'village',\n};\n","import { shuffle, getRandomItems, getRandomItem } from './utils';\nimport CARDS from './utils/cards';\nimport {\n  SIMPLE_GAME_GOALS,\n  NORMAL_GAME_GOALS,\n  PHASES,\n  RIFT_LAND_ID,\n  SCREENS,\n} from './utils/constants';\n\nclass GameEngine {\n  constructor() {\n    this.shuffledDeck = shuffle(Object.values(CARDS.EXPLORE_CARDS));\n\n    this.goals = [];\n    this.deck = [];\n\n    this.riftLands = null;\n\n    this.monsters = null;\n    this.activeMonsters = [];\n    this.usedMonsters = [];\n\n    this.skills = null;\n    this.currentSeason = null;\n    this.currentSeasonIndex = -1;\n    this.phase = PHASES.SEASON;\n    this.explorationIndex = 0;\n    this.currentDuration = 0;\n  }\n\n  get previousCard() {\n    return this.deck[this.explorationIndex - 1];\n  }\n\n  get currentCard() {\n    return this.deck[this.explorationIndex];\n  }\n\n  get nextCard() {\n    return this.deck[this.explorationIndex + 1];\n  }\n\n  get isOnRuin() {\n    return this.previousCard?.type === 'ruin';\n  }\n\n  get isAmbush() {\n    return this.currentCard?.type === 'ambush';\n  }\n\n  get state() {\n    return {\n      goals: this.goals,\n      deck: this.deck,\n      skills: this.skills,\n      currentSeason: this.currentSeason,\n      phase: this.phase,\n      previousCard: this.previousCard,\n      currentCard: this.currentCard,\n      nextCard: this.nextCard,\n      currentDuration: this.currentDuration,\n      isOnRuin: this.isOnRuin,\n      isAmbush: this.isAmbush,\n    };\n  }\n\n  setup({ mode = 'normal', monsters = true, extraRiftLands = false, skills = false }) {\n    // Define goals\n    this.setupGoals(mode);\n\n    // Add monsters\n    this.monsters = monsters ? shuffle(Object.values(CARDS.AMBUSH_CARDS)) : null;\n\n    // Add extra Rift Lands\n    this.riftLands = extraRiftLands ? new Array(2).fill(CARDS.EXPLORE_CARDS[RIFT_LAND_ID]) : null;\n\n    // Add skills\n    this.skills = skills ? getRandomItems(CARDS.SKILL_CARDS, 3) : null;\n\n    // Prepare deck\n    this.setupSeason();\n  }\n\n  setupGoals(mode) {\n    const goalsIndexes = mode === 'simple' ? SIMPLE_GAME_GOALS : NORMAL_GAME_GOALS;\n\n    const forestGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.forests)];\n    const farmlandsGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.farmlands)];\n    const villagesGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.villages)];\n    const territoryGoal = CARDS.GOAL_CARDS[getRandomItem(goalsIndexes.territory)];\n\n    this.goals = shuffle([forestGoal, farmlandsGoal, villagesGoal, territoryGoal]);\n  }\n\n  setupSeason() {\n    this.currentSeasonIndex++;\n    this.currentSeason = Object.values(CARDS.SEASON_CARDS)[this.currentSeasonIndex];\n    this.currentDuration = this.currentSeason.duration;\n\n    let newShuffledDeck = [...this.shuffledDeck];\n\n    // Add one monster\n    if (this.monsters) {\n      this.activeMonsters.push(this.monsters.pop());\n      newShuffledDeck = [...newShuffledDeck, ...this.activeMonsters];\n    }\n\n    // If first season and rift lands, add them\n    if (this.riftLands) {\n      newShuffledDeck = [...newShuffledDeck, ...this.riftLands];\n    }\n\n    // Shuffle built deck\n    newShuffledDeck = shuffle(newShuffledDeck);\n\n    const newDeck = [];\n\n    // Prepare deck\n    let duration = 0;\n    let index = 0;\n    while (duration < this.currentSeason.duration) {\n      const card = newShuffledDeck[index];\n      newDeck.push(card);\n      duration += card.duration;\n      index++;\n    }\n\n    this.deck = shuffle(newDeck);\n\n    // Swap monsters if coming after ruin, if used also remove it\n    const AMBUSHES = { 1: true, 2: true, 3: true, 4: true };\n    const RUINS = { 5: true, 6: true };\n\n    let isDeckReady = false;\n\n    while (!isDeckReady) {\n      isDeckReady = true;\n      for (let i = 0; i < this.deck.length; i++) {\n        const currentEl = this.deck[i];\n        const previousEl = this.deck[i - 1] || {};\n\n        if (RUINS[previousEl.number] && AMBUSHES[currentEl.number]) {\n          isDeckReady = false;\n          [this.deck[i - 1], this.deck[i]] = [this.deck[i], this.deck[i - 1]];\n        }\n      }\n    }\n\n    this.explorationIndex = this.deck[0].type === 'ruin' ? 1 : 0;\n\n    return this.state;\n  }\n\n  startSeason() {\n    this.phase = SCREENS.EXPLORE;\n    this.currentDuration -= this.deck[this.explorationIndex].duration;\n\n    return this.state;\n  }\n\n  goToPreviousCard() {\n    this.explorationIndex--;\n    this.currentDuration += this.deck[this.explorationIndex].duration;\n\n    if (this.currentCard.type === 'ruin') {\n      return this.goToPreviousCard();\n    }\n\n    if (this.currentCard.type === 'ambush') {\n      this.activeMonsters.push(this.usedMonsters.pop());\n    }\n\n    return this.state;\n  }\n\n  goToNextCard() {\n    if (this.currentDuration <= 0) {\n      return this.goToScore();\n    }\n\n    if (this.currentCard.type === 'ambush') {\n      // remove from active monsters\n      this.activeMonsters = this.activeMonsters.reduce((acc, monsterCard) => {\n        if (monsterCard.number === this.currentCard.number) {\n          this.usedMonsters.push(monsterCard);\n        } else {\n          acc.push(monsterCard);\n        }\n\n        return acc;\n      }, []);\n    }\n\n    this.explorationIndex++;\n    this.currentDuration -= this.deck[this.explorationIndex].duration;\n\n    if (this.currentCard.type === 'ruin') {\n      return this.goToNextCard();\n    }\n\n    return this.state;\n  }\n\n  goToScore() {\n    this.phase = SCREENS.SCORING;\n\n    return this.state;\n  }\n\n  startNewSeason() {\n    if (this.currentSeasonIndex < 3) {\n      this.setupSeason();\n      this.startSeason();\n    } else {\n      this.phase = SCREENS.GAME_OVER;\n    }\n\n    return this.state;\n  }\n\n  reset() {\n    this.shuffledDeck = shuffle(Object.values(CARDS.EXPLORE_CARDS));\n\n    this.goals = [];\n    this.deck = [];\n\n    this.riftLands = null;\n\n    this.monsters = null;\n    this.activeMonsters = [];\n    this.usedMonsters = [];\n\n    this.skills = null;\n    this.currentSeason = null;\n    this.currentSeasonIndex = -1;\n    this.phase = PHASES.SEASON;\n    this.explorationIndex = 0;\n    this.currentDuration = 0;\n\n    return this.state;\n  }\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport gameEngine from './engine';\n\nimport { SCREENS } from './utils/constants';\n\nconst initialState = {\n  screen: SCREENS.HOME,\n  game: gameEngine.state,\n  isLoading: false,\n  showGoals: false,\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\n\nimport FlagIcon from '@material-ui/icons/Flag';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport HistoryIcon from '@material-ui/icons/History';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nconst getBackgroundModifier = (phase, isAmbush, isOnRuin) => {\n  if (phase !== 'EXPLORE') {\n    return '';\n  }\n\n  if (isAmbush) {\n    return 'header--ambush';\n  }\n\n  if (isOnRuin) {\n    return 'header--ruin';\n  }\n\n  return '';\n};\n\nconst Header = ({ title, isExploreDisabled = false, isGoalsDisabled = false }) => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [screen, setScreen] = useGlobalState('screen');\n  const [showGoals, setShowGoals] = useGlobalState('showGoals');\n\n  const handleResume = () => {\n    setScreen(game.phase);\n  };\n\n  const handleGoals = () => {\n    setScreen(SCREENS.GOALS);\n  };\n\n  const handleReset = () => {\n    gameEngine.reset();\n    setScreen(SCREENS.SETUP);\n  };\n\n  const toggleGoalsVisibility = () => {\n    setShowGoals((flag) => !flag);\n  };\n\n  const backgroundModifier = getBackgroundModifier(game.phase, game.isAmbush, game.isOnRuin);\n\n  return (\n    <AppBar position=\"static\" className={`header ${backgroundModifier}`}>\n      <Button\n        className=\"header__btn\"\n        onClick={handleResume}\n        startIcon={<ExploreIcon />}\n        disabled={isExploreDisabled}\n      >\n        Resume\n      </Button>\n      <Button\n        className=\"header__btn\"\n        onClick={handleGoals}\n        startIcon={<FlagIcon />}\n        disabled={isGoalsDisabled}\n      >\n        Goals\n      </Button>\n      <h3>{title}</h3>\n      <Button\n        className=\"header__btn\"\n        onClick={toggleGoalsVisibility}\n        startIcon={showGoals ? <VisibilityOffIcon /> : <VisibilityIcon />}\n        disabled={screen !== SCREENS.EXPLORE}\n      >\n        {showGoals ? 'Hide Goals' : 'Show Goals'}\n      </Button>\n      <Button className=\"header__btn\" onClick={handleReset} startIcon={<HistoryIcon />}>\n        Reset\n      </Button>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Card = ({ id, className, prefix = 'card_' }) => {\n  const numberId = typeof id === 'number' && id < 10 ? `0${id}` : id;\n  return (\n    <img\n      className={className ? className : 'card'}\n      src={`${process.env.PUBLIC_URL}/images/${prefix}${numberId}.jpg`}\n      alt={id}\n    />\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport { GOAL_TYPE } from '../utils/constants';\nimport CARDS from '../utils/cards';\n\nimport Card from './Card';\n\nconst ExploreGoal = ({ card, index, side, isActive }) => {\n  return (\n    <div className={`explore-goal explore-goal--${side} ${isActive ? 'explore-goal--active' : ''}`}>\n      <div className=\"icons\">\n        <Card id={CARDS.EDICT_CARDS[index].number} className=\"card-mini\" />\n        <Card id={GOAL_TYPE[card.type]} className=\"card-icon card-icon--selected\" prefix=\"icon-\" />\n      </div>\n      <span className=\"effect\">{card.effect}</span>\n    </div>\n  );\n};\n\nexport default ExploreGoal;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport gameEngine from '../engine';\n\nimport Header from './Header';\nimport Card from './Card';\nimport ExploreGoal from './ExploreGoal';\n\nconst PreviousCard = ({ previousCard, onClick }) => {\n  const cardNumber = previousCard?.number || 0;\n\n  return (\n    <div className=\"explore-card explore-card--previous\" onClick={onClick}>\n      <Card id={cardNumber} className=\"card card--faded-left\" />\n    </div>\n  );\n};\n\nconst CurrentCard = ({ currentCard, previousCard }) => {\n  return (\n    <div className=\"explore-card explore-card--current\">\n      {previousCard?.type === 'ruin' ? (\n        <Card id={previousCard.number} className=\"card-mini card-mini--ruin\" />\n      ) : null}\n      <Card id={currentCard.number} />\n    </div>\n  );\n};\n\nconst NextCard = ({ nextCard, onClick }) => {\n  return (\n    <div className=\"explore-card explore-card--next\" onClick={onClick}>\n      <Card id={0} className=\"card card--faded-right\" />\n    </div>\n  );\n};\n\nconst isGoalActive = (season, letter) => {\n  return season.scores.some((score) => score.letter === letter);\n};\n\nconst Explore = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n  const [showGoals] = useGlobalState('showGoals');\n\n  const handleNextCard = () => {\n    setGame(gameEngine.goToNextCard());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const handlePreviousCard = () => {\n    setGame(gameEngine.goToPreviousCard());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason, currentDuration } = game;\n\n  return (\n    <div className=\"explore\">\n      <Header title=\"Explore\" isExploreDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        {currentSeason.name}\n      </h1>\n\n      <h2 className=\"subtitle\">Time remaining: {currentDuration > -1 ? currentDuration : 0}</h2>\n\n      <div className=\"explore-container\">\n        {showGoals && (\n          <aside className=\"explore-goals explore-goals--left\">\n            <ExploreGoal\n              card={game.goals[0]}\n              index={0}\n              side=\"left\"\n              isActive={isGoalActive(currentSeason, 'A')}\n            />\n            <ExploreGoal\n              card={game.goals[1]}\n              index={1}\n              side=\"left\"\n              isActive={isGoalActive(currentSeason, 'B')}\n            />\n          </aside>\n        )}\n\n        <section\n          className={`explore__playarea ${showGoals ? 'explore__playarea--with-goals' : ''}`}\n        >\n          <PreviousCard\n            previousCard={game.previousCard}\n            onClick={Boolean(game.previousCard) ? handlePreviousCard : null}\n          />\n          <CurrentCard currentCard={game.currentCard} previousCard={game.previousCard} />\n          <NextCard nextCard={game.nextCard} onClick={handleNextCard} />\n        </section>\n\n        {showGoals && (\n          <aside className=\"explore-goals explore-goals--right\">\n            <ExploreGoal\n              card={game.goals[2]}\n              index={2}\n              side=\"right\"\n              isActive={isGoalActive(currentSeason, 'C')}\n            />\n            <ExploreGoal\n              card={game.goals[3]}\n              index={3}\n              side=\"right\"\n              isActive={isGoalActive(currentSeason, 'D')}\n            />\n          </aside>\n        )}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button\n          variant=\"outlined\"\n          className=\"btn btn--outline\"\n          onClick={handlePreviousCard}\n          disabled={!Boolean(game.previousCard)}\n        >\n          Previous Card\n        </Button>\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleNextCard}>\n          {currentDuration > 0 ? 'Next Card' : 'Score'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Explore;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport logo from '../images/carto-logo.svg';\n\nimport useGlobalState from '../useGlobalState';\nimport gameEngine from '../engine';\nimport { SCREENS } from '../utils/constants';\n\nimport Header from './Header';\n\nconst GameOver = () => {\n  // Global States\n  const [, setScreen] = useGlobalState('screen');\n  const [, setGame] = useGlobalState('game');\n\n  const handStartNewGame = () => {\n    setGame(gameEngine.reset());\n    setScreen(SCREENS.SETUP);\n  };\n\n  return (\n    <div className=\"game-over\">\n      <Header title=\"End Game\" isGoalsDisabled isExploreDisabled />\n      <img className=\"logo\" src={logo} alt=\"Carto logo\" />\n      <p>Tally your scores. The highest score wins!</p>\n      <div className=\"game-over__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handStartNewGame}>\n          Start New Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameOver;\n","import React from 'react';\n\nimport { GOAL_TYPE } from '../utils/constants';\nimport CARDS from '../utils/cards';\n\nimport Card from './Card';\n\nconst GoalCard = ({ card, index, isActive = true }) => (\n  <div className={`goal-card ${isActive ? '' : 'goal-card--inactive'}`}>\n    <div className=\"goal-card__types\">\n      <Card id={CARDS.EDICT_CARDS[index].number} className=\"card-mini\" />\n      <Card id={GOAL_TYPE[card.type]} className=\"card-icon card-icon--selected\" prefix=\"icon-\" />\n    </div>\n    <div className=\"goal-card__main\">\n      <Card id={card.number} />\n      <p className=\"goal-card__effect\">{card.effect}</p>\n    </div>\n  </div>\n);\n\nexport default GoalCard;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport Header from './Header';\nimport GoalCard from './GoalCard';\n\nconst Goals = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleResume = () => {\n    setScreen(game.phase);\n  };\n\n  return (\n    <div className=\"goals\">\n      <Header title=\"Goals\" isGoalsDisabled />\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          return <GoalCard key={card.number} card={card} index={index} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleResume}>\n          Resume Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Goals;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport logo from '../images/carto-logo.svg';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nconst Home = () => {\n  // Global States\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleCreateGame = () => {\n    setScreen(SCREENS.SETUP);\n  };\n\n  const handleResumeGame = () => {\n    // Do magic to resume game\n    // setScreen to appropriate screen\n  };\n\n  return (\n    <div className=\"home\">\n      <img className=\"logo\" src={logo} alt=\"Carto logo\" />\n      <h1>Carto</h1>\n      <div className=\"home__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleCreateGame}>\n          Create Game\n        </Button>\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleResumeGame} disabled>\n          Resume Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport gameEngine from '../engine';\n\nimport Header from './Header';\nimport GoalCard from './GoalCard';\nimport Card from './Card';\n\nconst Scoring = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleNewStartSeason = () => {\n    setGame(gameEngine.startNewSeason());\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason } = game;\n\n  return (\n    <div className=\"scoring\">\n      <Header title={`Score ${currentSeason.name}`} isGoalsDisabled isExploreDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        Score for {currentSeason.name}\n      </h1>\n\n      <ul className=\"score-items\">\n        <li>Calculate your points for {currentSeason.scores[0].letter}.</li>\n        <li>Calculate your points for {currentSeason.scores[1].letter}.</li>\n        <li>Add 1 point for each unused coin you have.</li>\n        <li>Subtract 1 point for each Monster adjacent square that is not filled.</li>\n      </ul>\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          const isActive = Boolean(currentSeason.scores.find((card) => card.index === index));\n          return <GoalCard key={card.number} card={card} index={index} isActive={isActive} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleNewStartSeason}>\n          {currentSeason.name !== 'Winter' ? 'Start New Season' : 'End Game'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Scoring;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport useGlobalState from '../useGlobalState';\n\nimport gameEngine from '../engine';\n\nimport Header from './Header';\nimport GoalCard from './GoalCard';\nimport Card from './Card';\n\nconst Season = () => {\n  // Global States\n  const [game, setGame] = useGlobalState('game');\n  const [, setScreen] = useGlobalState('screen');\n\n  const handleStartSeason = () => {\n    gameEngine.startSeason();\n    setGame(gameEngine.state);\n    setScreen(gameEngine.state.phase);\n  };\n\n  const { currentSeason } = game;\n\n  return (\n    <div className=\"season\">\n      <Header title=\"New Season\" isGoalsDisabled isExploreDisabled />\n\n      <h1 className=\"title\">\n        <Card id=\"season\" className=\"card-icon card-icon--inline-title\" prefix=\"icon-\" />\n        {currentSeason.name}\n      </h1>\n\n      <h2 className=\"subtitle\">\n        Duration: {currentSeason.duration} | Scoring:{' '}\n        {currentSeason.scores.map((c) => c.letter).join(' & ')}\n      </h2>\n\n      <div className=\"goals-list\">\n        {game.goals.map((card, index) => {\n          const isActive = Boolean(currentSeason.scores.find((card) => card.index === index));\n          return <GoalCard key={card.number} card={card} index={index} isActive={isActive} />;\n        })}\n      </div>\n\n      <div className=\"goals__actions\">\n        <Button variant=\"outlined\" className=\"btn btn--outline\" onClick={handleStartSeason}>\n          Start Season\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Season;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nimport logo from '../images/carto-logo.svg';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { COLORS, SCREENS } from '../utils/constants';\n\nconst Setup = () => {\n  // Global States\n  const [, setScreen] = useGlobalState('screen');\n  const [, setGame] = useGlobalState('game');\n  // Local States\n  const [mode, setMode] = useState('normal');\n  const [addMonsters, setAddMonsters] = useState(true);\n  const [addSkills, setAddSkills] = useState(false);\n  const [addRiftLands, setAddRiftLands] = useState(false);\n\n  const handleStartGame = () => {\n    gameEngine.setup({\n      mode,\n      monsters: addMonsters,\n      extraRiftLands: addRiftLands,\n      skills: addSkills,\n    });\n    setGame(gameEngine.state);\n    setScreen(SCREENS.GOALS);\n  };\n\n  return (\n    <div className=\"setup\">\n      <img className=\"logo-small\" src={logo} alt=\"Carto logo\" />\n      <h1>Setup</h1>\n      <FormGroup>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\" style={{ color: COLORS.PRIMARY }}>\n            Mode\n          </FormLabel>\n          <RadioGroup\n            aria-label=\"mode\"\n            name=\"mode\"\n            value={mode}\n            onChange={(event) => setMode(event.target.value)}\n          >\n            <FormControlLabel value=\"simple\" control={<Radio />} label=\"Simple\" />\n            <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n          </RadioGroup>\n        </FormControl>\n\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\" style={{ color: COLORS.PRIMARY }}>\n            Options\n          </FormLabel>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addMonsters}\n                onChange={() => setAddMonsters((value) => !value)}\n                name=\"add-monsters\"\n              />\n            }\n            label=\"Add Monsters\"\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addSkills}\n                onChange={() => setAddSkills((value) => !value)}\n                name=\"add-kills\"\n                disabled\n              />\n            }\n            label=\"Add Skills\"\n          />\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={addRiftLands}\n                onChange={() => setAddRiftLands((value) => !value)}\n                name=\"add-rift-lands\"\n              />\n            }\n            label=\"Add Aditional Rift Lands\"\n          />\n        </FormControl>\n      </FormGroup>\n      <div className=\"setup__actions\">\n        <Button variant=\"outlined\" className=\"btn--outline\" onClick={handleStartGame}>\n          Start Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Setup;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nimport Explore from './Explore';\nimport GameOver from './GameOver';\nimport Goals from './Goals';\nimport Home from './Home';\nimport Scoring from './Scoring';\nimport Season from './Season';\nimport Setup from './Setup';\n\nconst ScreenComponents = {\n  [SCREENS.EXPLORE]: <Explore />,\n  [SCREENS.GAME_OVER]: <GameOver />,\n  [SCREENS.GOALS]: <Goals />,\n  [SCREENS.HOME]: <Home />,\n  [SCREENS.SCORING]: <Scoring />,\n  [SCREENS.SEASON]: <Season />,\n  [SCREENS.SETUP]: <Setup />,\n};\n\nconst getBackgroundModifier = (phase, isAmbush, isOnRuin) => {\n  if (phase !== 'EXPLORE') {\n    return '';\n  }\n\n  if (isAmbush) {\n    return 'bg-ambush';\n  }\n\n  if (isOnRuin) {\n    return 'bg-ruin';\n  }\n\n  return '';\n};\n\nconst App = () => {\n  // Global States\n  const [isLoading] = useGlobalState('isLoading');\n  const [screen] = useGlobalState('screen');\n  const [game] = useGlobalState('game');\n\n  const backgroundModifier = getBackgroundModifier(game.phase, game.isAmbush, game.isOnRuin);\n\n  return (\n    <Container maxWidth=\"lg\" className={`app-container ${backgroundModifier}`}>\n      {isLoading ? <LinearProgress /> : <div className=\"progress-bar-placeholder\" />}\n      {ScreenComponents[screen]}\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}